<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode-838</title>
      <link href="2022/02/21/leetcode-838/"/>
      <url>2022/02/21/leetcode-838/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/02/21/leetcode-838/1.jpg" alt="image-20220221121105328"></p><p>纯模拟，我的写法是加了一个左侧指针，官方解答是双指针或者BFS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">pushDominoes</span>(<span class="params">self, dominoes: <span class="built_in">str</span></span>) -&gt; str:</span></span><br><span class="line">    length = <span class="built_in">len</span>(dominoes)</span><br><span class="line">    ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    p = -<span class="number">1</span></span><br><span class="line">    c = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; length:</span><br><span class="line">      <span class="keyword">if</span> dominoes[i] == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">          <span class="keyword">if</span> (i - p + <span class="number">1</span>) % <span class="number">2</span>:</span><br><span class="line">            ans += <span class="string">&#x27;R&#x27;</span> * ((i - p - <span class="number">2</span>) // <span class="number">2</span>) + <span class="string">&#x27;.&#x27;</span> + <span class="string">&#x27;L&#x27;</span> * ((i - p) // <span class="number">2</span>)</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">            ans += <span class="string">&#x27;R&#x27;</span> * ((i - p - <span class="number">1</span>) // <span class="number">2</span>) + <span class="string">&#x27;L&#x27;</span> * ((i - p + <span class="number">1</span>) // <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          ans += <span class="string">&#x27;L&#x27;</span> * (i - p)</span><br><span class="line">        p = i</span><br><span class="line">        c = <span class="string">&#x27;L&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> dominoes[i] == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">          ans += <span class="string">&#x27;R&#x27;</span> * (i - p - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          ans += <span class="string">&#x27;.&#x27;</span> * (i - p - <span class="number">1</span>)</span><br><span class="line">        ans += <span class="string">&#x27;R&#x27;</span></span><br><span class="line">        p = i</span><br><span class="line">        c = <span class="string">&#x27;R&#x27;</span></span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">      ans += <span class="string">&#x27;R&#x27;</span> * (i - p - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      ans += <span class="string">&#x27;.&#x27;</span> * (i - p - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>看到一个 nb 的代码，BFS的，思路很简单，虽然很慢，但是很 nb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pushDominoes</span>(<span class="params">self, dominoes: <span class="built_in">str</span></span>) -&gt; str:</span></span><br><span class="line">        od = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> dominoes != od:</span><br><span class="line">            od = dominoes</span><br><span class="line">            dominoes = dominoes.replace(<span class="string">&quot;R.L&quot;</span>, <span class="string">&quot;T&quot;</span>)</span><br><span class="line">            dominoes = dominoes.replace(<span class="string">&quot;.L&quot;</span>, <span class="string">&quot;LL&quot;</span>)</span><br><span class="line">            dominoes = dominoes.replace(<span class="string">&quot;R.&quot;</span>, <span class="string">&quot;RR&quot;</span>)</span><br><span class="line">            dominoes = dominoes.replace(<span class="string">&quot;T&quot;</span>, <span class="string">&quot;R.L&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> dominoes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1345</title>
      <link href="2022/01/21/leetcode-1345/"/>
      <url>2022/01/21/leetcode-1345/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/01/21/leetcode-1345/W(~SI5H" alt="img">1VLXNRGJP2$DQ6P.png)</p><p>BFS即可，每个节点的相邻节点分别是，左边一个，右边一个，以及相同值的节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">minJumps</span>(<span class="params">self, arr: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line">    length = <span class="built_in">len</span>(arr)</span><br><span class="line">    table = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> idx, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(arr):</span><br><span class="line">      <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">        table[x] = []</span><br><span class="line">      table[x].append(idx)</span><br><span class="line">    vis = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)]</span><br><span class="line">    inq = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)]</span><br><span class="line">    q = Queue()</span><br><span class="line">    q.put((<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    inq[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">    g = length - <span class="number">1</span></span><br><span class="line">    node = q.get()</span><br><span class="line">    <span class="keyword">while</span> node[<span class="number">0</span>] != g:</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> vis[node[<span class="number">0</span>]]:</span><br><span class="line">        vis[node[<span class="number">0</span>]] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> arr[node[<span class="number">0</span>]] <span class="keyword">in</span> table:</span><br><span class="line">          <span class="keyword">for</span> x <span class="keyword">in</span> table[arr[node[<span class="number">0</span>]]]:</span><br><span class="line">            <span class="keyword">if</span> x != node[<span class="number">0</span>] <span class="keyword">and</span> <span class="keyword">not</span> vis[x] <span class="keyword">and</span> <span class="keyword">not</span> inq[x]:</span><br><span class="line">              q.put((x, node[<span class="number">1</span>] + <span class="number">1</span>))</span><br><span class="line">              inq[x] = <span class="literal">True</span></span><br><span class="line">          <span class="keyword">del</span> table[arr[node[<span class="number">0</span>]]]</span><br><span class="line">        nxt = node[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> inq[nxt]:</span><br><span class="line">          q.put((nxt, node[<span class="number">1</span>] + <span class="number">1</span>))</span><br><span class="line">          inq[nxt] = <span class="literal">True</span></span><br><span class="line">        nxt = node[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> nxt &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> inq[nxt]:</span><br><span class="line">          q.put((nxt, node[<span class="number">1</span>] + <span class="number">1</span>))</span><br><span class="line">          inq[nxt] = <span class="literal">True</span></span><br><span class="line">      node = q.get()</span><br><span class="line">    <span class="keyword">return</span> node[<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码写的比较丑，还有优化的空间。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-219</title>
      <link href="2022/01/19/leetcode-219/"/>
      <url>2022/01/19/leetcode-219/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/01/19/leetcode-219/36VUR1R7ZD2[{NUR8R86AUK.png" alt="img"></p><p>简单的滑动窗口+哈希表，代码写的比较丑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyDuplicate</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; bool:</span></span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">    table = <span class="built_in">set</span>()</span><br><span class="line">    f = <span class="literal">False</span></span><br><span class="line">    g = <span class="built_in">min</span>(k, <span class="built_in">len</span>(nums))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(g):</span><br><span class="line">      <span class="keyword">if</span> nums[i] <span class="keyword">in</span> table:</span><br><span class="line">        f = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      table.add(nums[i])</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(g, <span class="built_in">len</span>(nums)):</span><br><span class="line">      table.remove(nums[i - k])</span><br><span class="line">      <span class="keyword">if</span> nums[i] <span class="keyword">in</span> table:</span><br><span class="line">        f = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      table.add(nums[i])</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-382</title>
      <link href="2022/01/16/leetcode-382/"/>
      <url>2022/01/16/leetcode-382/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/01/16/leetcode-382/image-20220116132100332.png" alt="image-20220116132100332"></p><p>最简单的方式：先用List存储，然后用Random包随机。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, head: Optional[ListNode]</span>):</span></span><br><span class="line">    self.arr = []</span><br><span class="line">    <span class="keyword">while</span> head <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">      self.arr.append(head.val)</span><br><span class="line">      head = head.<span class="built_in">next</span></span><br><span class="line">    self.length = <span class="built_in">len</span>(self.arr)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getRandom</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    x = random.randint(<span class="number">0</span>, self.length -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> self.arr[x]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(head)</span></span><br><span class="line"><span class="comment"># param_1 = obj.getRandom()</span></span><br></pre></td></tr></table></figure><p>满足进阶要求需要使用“蓄水池抽样算法”，第一次听说这个算法，先mark一下，有空了解了写篇博客记下笔记。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>研究生入学第一天</title>
      <link href="2021/09/04/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>2021/09/04/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>隔了很长时间写一篇博客，也许叫做随手写的心情实录比较好。</p><p>fdu入学第一天，果然研究生和本科还是不一样的，主要是大家都有自己的圈子，我一个人在这个就显得比较孤单了，emm，就是这么回事，可能以后吃饭上课就是一个人的路线了，也不是强求一定要有人陪着，但是还是会觉得有点孤单，毕竟大多数人还是比较喜欢有能够交心的朋友然后嘻嘻哈哈的吧，而不是仅限于点头之交。</p><p>明天体检&amp;组会，仅此而已。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STL阅读笔记-迭代器</title>
      <link href="2020/12/30/STL%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>2020/12/30/STL%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>STL的中心思想在于把数据（容器）和算法分离开，彼此之间没有关系，独立设计，都不必关心彼此的实现细节，但是那我们就需要用什么东西去使这两者能够结合起来，这就是迭代器的意义。</p><p>以 C++14 的 STL 源码为例，其线性查找函数如下所示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// This is an overload used by find algos for the Input Iterator case.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _InputIterator, <span class="keyword">typename</span> _Predicate&gt;</span><br><span class="line">  <span class="keyword">inline</span> _InputIterator</span><br><span class="line">  __find_if(_InputIterator __first, _InputIterator __last,</span><br><span class="line">      _Predicate __pred, input_iterator_tag)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (__first != __last &amp;&amp; !__pred(__first))</span><br><span class="line"> ++__first;</span><br><span class="line">    <span class="keyword">return</span> __first;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 源码剖析</span></span><br><span class="line"><span class="comment"> * 这是其find函数最底层实现的一个（有多个重载函数）</span></span><br><span class="line"><span class="comment"> * 可以看到，此处的输入的参数是 __first，__last，__pred，</span></span><br><span class="line"><span class="comment"> * 分别代表查找段的开头，结尾，需要查找的数据（严格来说不是数据本身）</span></span><br><span class="line"><span class="comment"> * 虽然不知道_InputIterator本身具体是什么（指针？类？），但是我们并不关心它是什么</span></span><br><span class="line"><span class="comment"> * 拿来用就行了，该做的++操作什么的还是照常来，（具体来说因为迭代器内部已经有实现了）</span></span><br><span class="line"><span class="comment"> * 此处__pred(__first)是用来判断__first指向的值是否等于__pred指向的值</span></span><br><span class="line"><span class="comment"> * input_iterator_tag用来表明迭代的是该类型的</span></span><br><span class="line"><span class="comment"> * 简单来说，iterator本身是有不同类型的，</span></span><br><span class="line"><span class="comment"> * 然后针对不同的iterator类型通过函数重载设计了当前类型下最优的算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码是比较有代表性的，我们完全不知道容器内部的构造，但是能够通过迭代器对其元素进行访问。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>迭代器（iterator）是一种行为类似于指针的东西（对象，或者本身就是原生指针）。</p><p>那因此想到指针最重要的就是元素访问，所以需要对 * 运算符进行重载，再就是成员访问，因此还需要对 -&gt; 运算符进行重载</p>]]></content>
      
      
      <categories>
          
          <category> STL阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL阅读笔记-Traits</title>
      <link href="2020/12/30/STL%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Traits/"/>
      <url>2020/12/30/STL%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Traits/</url>
      
        <content type="html"><![CDATA[<p>最近一个月读了读《STL源码剖析》，有点散乱，打算把一些比较重要的东西记录下来。</p><p><strong>空间适配器</strong>那部分有点读的不是很明白，也不是很仔细，主要是我个人对于这些空间上的管理不是很感兴趣 ¿，因此只是略略的读了一遍。</p><p>而迭代器这部分就比较有意思了，因此我决定从迭代器这部分开始比较仔细的做笔记。</p><p>本文章主要讲一讲 <strong>Traits 编程技法</strong>。</p><p>在这之前需要了解一下C++的一些复杂特性，以下主要说<strong>模板特化与偏特化</strong>。</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>如下是一个基本的模板类写法，使用了仿函数（重载了括号运算符的类。简而言之，可以把一个类对象当做一个函数似的去调用）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">class <span class="title">Equal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(T&amp; x, T&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是这个模板真的能够通用吗，答案是否定的，比如浮点数之间的比较，众所周知浮点数的存储是有误差的，因此两个浮点数的大小比较不能简单的用 == 的方式，而应该定义为相差的绝对值不超过eps（eps需要多少由你自己的需求决定）。</p><p>但是我们这个模板在大部分情况下是通用的，只是在少数情况下需要替换，怎么办？</p><h3 id="特化"><a href="#特化" class="headerlink" title="特化"></a>特化</h3><p>此时模板特化就派上用场了，注意写法，此处已经全部特化就不用谢模板参数 T 了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>  <span class="comment">// 普通模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Equal</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T&amp; x, T&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> x == y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;  <span class="comment">// 特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Equal</span>&lt;</span><span class="keyword">double</span>&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">double</span>&amp; x, <span class="keyword">double</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Equal&lt;double&gt;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(x - y) &lt;= eps;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当对模板进行实例化时，编译器先去找有没有特化版本，有的话就使用特化版本，否则就使用普通的模板。</p><p>这样，我们就能够对一些特殊情况使用模板了。</p><h3 id="偏特化"><a href="#偏特化" class="headerlink" title="偏特化"></a>偏特化</h3><p>偏特化是对模板本身进行了一些特殊限制，与特化有所区别，其本身仍然是一个模板，具体见代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>  <span class="comment">// 普通模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>  <span class="comment">// 偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span>&lt;</span>T*&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func&lt;T*&gt;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>  <span class="comment">// 偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span>&lt;</span><span class="keyword">const</span> T*&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func&lt;const T*&gt;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>偏特化本身还是模板，只不过对模板参数的类型进行了一定的限制，上述两种偏特化对原生指针和 const 指针进行了偏特化，这样，若模板参数为指针类型，我们就能对其进行一定程度的 “定制”。</p><p>偏特化是不是只有类似于以上两种写法呢，当然不是，如下也是可以的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp1</span>, <span class="keyword">class</span> _<span class="title">Tp2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp1</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&lt;</span>_Tp1, <span class="keyword">int</span>*&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test&lt;_Tp1, int*&gt;&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp1</span>, <span class="keyword">class</span> _<span class="title">Tp2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&lt;</span>_Tp1, _Tp2*&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test&lt;_Tp1, _Tp2*&gt;&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"> * @file         test.cpp</span></span><br><span class="line"><span class="comment"> * @date         2020/12/30 16:05:58</span></span><br><span class="line"><span class="comment"> * @author       zzpw</span></span><br><span class="line"><span class="comment"> * @version      1.0</span></span><br><span class="line"><span class="comment"> * @license:     (C)Copyright 2020-2020</span></span><br><span class="line"><span class="comment"> * @description: None</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 特化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>  <span class="comment">// 普通模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Equal</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> T&amp; y)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Equal&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> x == y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;  <span class="comment">// 特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Equal</span>&lt;</span><span class="keyword">double</span>&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; x, <span class="keyword">const</span> <span class="keyword">double</span>&amp; y)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Equal&lt;double&gt;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(x - y) &lt;= eps;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 偏特化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>  <span class="comment">// 普通模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>  <span class="comment">// 偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span>&lt;</span>T*&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func&lt;T*&gt;&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>  <span class="comment">// 偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span>&lt;</span><span class="keyword">const</span> T*&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func&lt;const T*&gt;&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 偏特化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp1</span>, <span class="keyword">class</span> _<span class="title">Tp2</span>&gt;</span>  <span class="comment">// 普通模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp1</span>&gt;</span>  <span class="comment">// 偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&lt;</span>_Tp1, <span class="keyword">int</span>*&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test&lt;_Tp1, int*&gt;&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp1</span>, <span class="keyword">class</span> _<span class="title">Tp2</span>&gt;</span>  <span class="comment">// 偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&lt;</span>_Tp1, _Tp2*&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test&lt;_Tp1, _Tp2*&gt;&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Equal&lt;<span class="keyword">int</span>&gt; e1;</span><br><span class="line">  Equal&lt;<span class="keyword">double</span>&gt; e2;</span><br><span class="line">  e1(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  e2(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  func&lt;<span class="keyword">int</span>&gt; f1;</span><br><span class="line">  func&lt;<span class="keyword">int</span>*&gt; f2;</span><br><span class="line">  func&lt;<span class="keyword">const</span> <span class="keyword">int</span>*&gt; f3;</span><br><span class="line">  f1();</span><br><span class="line">  f2();</span><br><span class="line">  f3();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  test&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; t1;</span><br><span class="line">  test&lt;<span class="keyword">int</span>, <span class="keyword">int</span>*&gt; t2;</span><br><span class="line">  test&lt;<span class="keyword">int</span>, <span class="keyword">char</span>*&gt; t3;</span><br><span class="line">  t1();</span><br><span class="line">  t2();</span><br><span class="line">  t3();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Traits编程技法"><a href="#Traits编程技法" class="headerlink" title="Traits编程技法"></a>Traits编程技法</h3><p>首先简单</p>]]></content>
      
      
      <categories>
          
          <category> STL阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>时隔一年多</title>
      <link href="2020/12/22/%E6%97%B6%E9%9A%94%E4%B8%80%E5%B9%B4%E5%A4%9A/"/>
      <url>2020/12/22/%E6%97%B6%E9%9A%94%E4%B8%80%E5%B9%B4%E5%A4%9A/</url>
      
        <content type="html"><![CDATA[<p>开始打理这个一年多没搞过的博客</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>公网连接阿里云ecs上的mongodb</title>
      <link href="2020/03/23/%E5%85%AC%E7%BD%91%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91ecs%E4%B8%8A%E7%9A%84mongodb/"/>
      <url>2020/03/23/%E5%85%AC%E7%BD%91%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91ecs%E4%B8%8A%E7%9A%84mongodb/</url>
      
        <content type="html"><![CDATA[<p>这几天因为要把爬虫部署在云服务器上，所以需要远程连接阿里云ecs的mongodb，在网上找了一大堆资料没一点用，渐觉无望，最后终于找到一篇博文有效的了！！！激动地老泪纵横（因为之前已经花了一晚上配置了）。</p><p><a href="https://juejin.im/post/5b84e4e5e51d4538b406de85">此为博客连接</a>，建议进去看，原博主比我讲的清楚的多。</p><p>本人配置：centos7(其他linux也没有太大区别)，mongodb4.2</p><p>不会使用vim的同学稍微百度一下</p><ol><li><p>首先要修改数据库配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/mongod.conf</span><br></pre></td></tr></table></figure></li></ol><p>   然后把 $bindIp$ 这一行注释掉, 并且在下面新加一行</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindIpAll: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol><li>修改防火墙配置，放行 $mongodb$ 服务的端口</li></ol><p>若防火墙未打开，要先打开防火墙，以下为有关防火墙的一整套命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl start firewalld <span class="comment"># 用这个就行</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --destination-port 27017 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A OUTPUT -p tcp --source-port 27017 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><ol><li>最后一步，设置阿里云安全组</li></ol><p>进入实例控制台</p><p><img src="/2020/03/23/%E5%85%AC%E7%BD%91%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91ecs%E4%B8%8A%E7%9A%84mongodb/1.png" alt="1"></p><p>依次点击更多，网络和安全组，安全组配置。再点击配置规则，快速创建规则，如图创建并确认。<img src="/2020/03/23/%E5%85%AC%E7%BD%91%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91ecs%E4%B8%8A%E7%9A%84mongodb/2.png" alt="2"></p><ol><li>之后即可愉快的用公网主机（命令行或类似于datagrip这样的GUI软件）去访问云服务器数据库啦，为了安全考虑建议对数据库用户进行检测和验证。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 云服务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Chrome页面 喔唷崩溃了 问题</title>
      <link href="2020/01/19/Chrome%E9%A1%B5%E9%9D%A2-%E5%96%94%E5%94%B7%E5%B4%A9%E6%BA%83%E4%BA%86-%E9%97%AE%E9%A2%98/"/>
      <url>2020/01/19/Chrome%E9%A1%B5%E9%9D%A2-%E5%96%94%E5%94%B7%E5%B4%A9%E6%BA%83%E4%BA%86-%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>总算能够闲下来好好写一篇博客了，前段时间忙于课程设计与期末考试。</p><p>最近碰到一个很坑爹的问题，就是Chrome在你没有更新的时候总是会不厌其烦的提醒你去更新，搞得人很烦，于是我就点了安装更新，以免它再提示，结果……更新完之后打开任何网页都是提示“喔唷崩溃了”，给我整懵了，据说这是Google更新出现的问题。</p><p>网上找到了一些解决方案，有一类是修改用快捷方式打开浏览器的方式，打开快捷方式的属性后，在目标后面添加—no-sandbox后缀，但这种方式打开Chrome会有安全提示，不美观而且麻烦，另一种是在后面加 —disable-features=RendererCodeIntegrity后缀，没有了安全提示，结果我一度以为解决了……，但你会发现，用快捷方式打开浏览器没有问题，但用别的方式，例如点开QQ消息里的链接，还是会显示“喔唷崩溃了”……</p><p>最后找到了一个完美的解决方案，<a href="https://www.cnblogs.com/RyanZhou/p/12083025.html">点此进入</a>，若没有博客里说的那个路径，需要自己手动创建（本人就是）。</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程模拟rip协议</title>
      <link href="2019/11/20/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E6%8B%9Frip%E5%8D%8F%E8%AE%AE/"/>
      <url>2019/11/20/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E6%8B%9Frip%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>最近在做计算机网络的一个小实验，多线程模拟rip协议，实现距离向量算法，感觉挺有意思的，需要一定的思考之后才能写出结构比较好的代码。</p><p>路由器与网络相连，而不是与路由器直接相连。路由器先给所有直接相连的网络发消息（路由表报文），然后，网络再给所有与它直接相连的路由器转发。</p><p>下面贴代码了，可以直接运行</p><p>Pair.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 82177</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T1&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T2&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> T1 first;</span><br><span class="line"><span class="keyword">private</span> T2 second;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T1 first, T2 second)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.first = first;</span><br><span class="line"><span class="keyword">this</span>.second = second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T1 <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T2 <span class="title">getSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> second;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Message.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 82177</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@introduction</span> 路由表信息项类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String net; <span class="comment">// 目的网络</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> dist; <span class="comment">// 距离</span></span><br><span class="line"><span class="keyword">private</span> String nextRouter; <span class="comment">// 下一跳路由器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">net = <span class="string">&quot;————&quot;</span>;</span><br><span class="line">dist = <span class="number">0</span>;</span><br><span class="line">nextRouter = <span class="string">&quot;————&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String net, <span class="keyword">int</span> dist, String nextRouter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.net = net;</span><br><span class="line"><span class="keyword">this</span>.dist = dist;</span><br><span class="line"><span class="keyword">this</span>.nextRouter = nextRouter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.net = msg.net;</span><br><span class="line"><span class="keyword">this</span>.dist = msg.dist;</span><br><span class="line"><span class="keyword">this</span>.nextRouter = msg.nextRouter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getNetName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> net;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNetName</span><span class="params">(String net)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.net = net;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDist</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDist</span><span class="params">(<span class="keyword">int</span> dist)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dist = dist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getNextRouter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> nextRouter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextRouter</span><span class="params">(String nextRouter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nextRouter = nextRouter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLocalString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> net + <span class="string">&quot;\t&quot;</span> + dist + <span class="string">&quot;\t&quot;</span> +  nextRouter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> net + <span class="string">&quot;, &quot;</span> + dist + <span class="string">&quot;, &quot;</span> + nextRouter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>NetWork.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 82177</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@introduction</span> 网络类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetWork</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> work; <span class="comment">// 工作状态</span></span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 名称</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Router&gt; routers; <span class="comment">// 连接的路由器</span></span><br><span class="line"><span class="keyword">private</span> Queue&lt;Pair&lt;String, List&lt;Message&gt;&gt;&gt; mq; <span class="comment">// 消息队列</span></span><br><span class="line"><span class="keyword">private</span> NetSendRouteTable sendThread; <span class="comment">// 发送线程</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NetWork</span><span class="params">(String name)</span> </span>&#123; <span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.routers = <span class="keyword">new</span> ArrayList&lt;Router&gt;();</span><br><span class="line"><span class="keyword">this</span>.mq = <span class="keyword">new</span> LinkedList&lt;Pair&lt;String, List&lt;Message&gt;&gt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getNetName</span><span class="params">()</span> </span>&#123; <span class="comment">// 获取网络名称</span></span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWork</span><span class="params">()</span> </span>&#123; <span class="comment">// 返回工作状态</span></span><br><span class="line"><span class="keyword">return</span> work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; <span class="comment">// 开始工作</span></span><br><span class="line">work = <span class="keyword">true</span>;</span><br><span class="line">sendThread = <span class="keyword">new</span> NetSendRouteTable(<span class="keyword">this</span>);</span><br><span class="line">sendThread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123; <span class="comment">// 停止工作</span></span><br><span class="line">work = <span class="keyword">false</span>;</span><br><span class="line">sendThread.interrupt();</span><br><span class="line"><span class="keyword">synchronized</span>(mq) &#123;</span><br><span class="line">mq.clear();</span><br><span class="line">&#125;</span><br><span class="line">selfBroken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfBroken</span><span class="params">()</span> </span>&#123; <span class="comment">// 自身不可用</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; routers.size(); i++) &#123;</span><br><span class="line">Router rt = routers.get(i);</span><br><span class="line">rt.setNetBroken(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//public void selfReWork() &#123; // 重新工作</span></span><br><span class="line"><span class="comment">//Message m = new Message(name, 0, &quot;-&quot;);</span></span><br><span class="line"><span class="comment">//List&lt;Message&gt; list = new ArrayList&lt;Message&gt;();</span></span><br><span class="line"><span class="comment">//list.add(m);</span></span><br><span class="line"><span class="comment">//mq.add(new Pair&lt;String, List&lt;Message&gt;&gt;(&quot;-&quot;, list));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectRouter</span><span class="params">(Router rt)</span> </span>&#123; <span class="comment">// 连接路由器</span></span><br><span class="line">routers.add(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123; <span class="comment">// 向外发送一个路由表报文</span></span><br><span class="line"><span class="keyword">synchronized</span>(mq) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mq.isEmpty()) &#123;</span><br><span class="line">Pair&lt;String, List&lt;Message&gt;&gt; msg = mq.poll();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; routers.size(); i++) &#123;</span><br><span class="line">Router rt = routers.get(i);</span><br><span class="line"><span class="keyword">if</span> (rt.getRtName() != msg.getFirst()) &#123;</span><br><span class="line">rt.receiveMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String sourceRouter, List&lt;Message&gt; routeTable)</span> </span>&#123; <span class="comment">// 接收路由表</span></span><br><span class="line"><span class="keyword">if</span> (!work) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span>(mq) &#123;</span><br><span class="line">mq.add(<span class="keyword">new</span> Pair&lt;String, List&lt;Message&gt;&gt;(sourceRouter, routeTable));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetSendRouteTable</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; <span class="comment">// 网络发送线程类</span></span><br><span class="line"><span class="keyword">private</span> NetWork netWork;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NetSendRouteTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NetSendRouteTable</span><span class="params">(NetWork netWork)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.netWork = netWork;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">netWork.sendMessage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Router.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 82177</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@introduction</span> 路由器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> work; <span class="comment">// 工作状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> delay = <span class="number">3000</span>; <span class="comment">// delay 毫秒未接收到设为不可达</span></span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 名称</span></span><br><span class="line"><span class="keyword">private</span> List&lt;NetWork&gt; netWorks; <span class="comment">// 连接的网络</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Router&gt; linkRt; <span class="comment">// 相邻路由表</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Message&gt; routeTable; <span class="comment">// 路由表</span></span><br><span class="line"><span class="keyword">private</span> List&lt;UpdateInfo&gt; updateLog; <span class="comment">// 更新日志</span></span><br><span class="line"><span class="keyword">private</span> Queue&lt;List&lt;Message&gt;&gt; mq; <span class="comment">// 缓存队列</span></span><br><span class="line"><span class="keyword">private</span> SendRouteTable sendThread; <span class="comment">// 发送线程</span></span><br><span class="line"><span class="keyword">private</span> UpdateRouteTable updateThread; <span class="comment">// 更新线程</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ReceiveClock&gt; clock; <span class="comment">// 相邻路由器的发送时钟</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Router</span><span class="params">(String name)</span> </span>&#123; <span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.netWorks = <span class="keyword">new</span> ArrayList&lt;NetWork&gt;();</span><br><span class="line"><span class="keyword">this</span>.routeTable = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line"><span class="keyword">this</span>.linkRt = <span class="keyword">new</span> ArrayList&lt;Router&gt;();</span><br><span class="line"><span class="keyword">this</span>.updateLog = <span class="keyword">new</span> ArrayList&lt;UpdateInfo&gt;();</span><br><span class="line"><span class="keyword">this</span>.mq = <span class="keyword">new</span> LinkedList&lt;List&lt;Message&gt;&gt;();</span><br><span class="line"><span class="keyword">this</span>.sendThread = <span class="keyword">new</span> SendRouteTable(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.updateThread = <span class="keyword">new</span> UpdateRouteTable(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.clock = <span class="keyword">new</span> ArrayList&lt;ReceiveClock&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; <span class="comment">// 开始工作</span></span><br><span class="line">work = <span class="keyword">true</span>;</span><br><span class="line">connectNetWork(); <span class="comment">// 初始化路由表</span></span><br><span class="line">sendThread = <span class="keyword">new</span> SendRouteTable(<span class="keyword">this</span>);</span><br><span class="line">updateThread = <span class="keyword">new</span> UpdateRouteTable(<span class="keyword">this</span>);</span><br><span class="line">sendThread.start();</span><br><span class="line">updateThread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123; <span class="comment">// 停止工作</span></span><br><span class="line">work = <span class="keyword">false</span>;</span><br><span class="line">sendThread.interrupt();</span><br><span class="line">updateThread.interrupt();</span><br><span class="line">clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; <span class="comment">// 清空相关缓存</span></span><br><span class="line">mq.clear();</span><br><span class="line">routeTable.clear();</span><br><span class="line">updateLog.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectRouter</span><span class="params">(Router rt)</span> </span>&#123; <span class="comment">// 连接路由器</span></span><br><span class="line">linkRt.add(rt);</span><br><span class="line">clock.add(<span class="keyword">new</span> ReceiveClock(rt.name, System.currentTimeMillis() + delay));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectNetWork</span><span class="params">(NetWork net)</span> </span>&#123; <span class="comment">// 与某网络连接</span></span><br><span class="line">netWorks.add(net);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectNetWork</span><span class="params">()</span> </span>&#123; <span class="comment">// 与相邻网络连接，初始化路由表</span></span><br><span class="line"><span class="keyword">for</span> (NetWork net: netWorks) &#123;</span><br><span class="line">routeTable.add(<span class="keyword">new</span> Message(net.getNetName(), <span class="number">1</span>, <span class="string">&quot;-&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNetBroken</span><span class="params">(String net)</span> </span>&#123; <span class="comment">// 网络不可用</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; routeTable.size(); i++) &#123;</span><br><span class="line">Message m = routeTable.get(i);</span><br><span class="line"><span class="keyword">if</span> (m.getNetName() == net) &#123;</span><br><span class="line">m.setDist(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRouterBroken</span><span class="params">(String rt)</span> </span>&#123; <span class="comment">// 路由器不可用</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; routeTable.size(); i++) &#123;</span><br><span class="line">Message m = routeTable.get(i);</span><br><span class="line"><span class="keyword">if</span> (m.getNextRouter() == rt) &#123;</span><br><span class="line">m.setDist(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRtName</span><span class="params">()</span> </span>&#123; <span class="comment">// 获取路由器名称</span></span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRtName</span><span class="params">(String name)</span> </span>&#123; <span class="comment">// 设置路由器名称</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">copyTable</span><span class="params">(List&lt;Message&gt; routeTable)</span> </span>&#123; <span class="comment">// 复制路由表</span></span><br><span class="line">List&lt;Message&gt; rt = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; routeTable.size(); i++) &#123;</span><br><span class="line">rt.add(<span class="keyword">new</span> Message(routeTable.get(i)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123; <span class="comment">// 发出路由表</span></span><br><span class="line"><span class="keyword">synchronized</span>(routeTable) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; netWorks.size(); i++) &#123;</span><br><span class="line">netWorks.get(i).receiveMessage(name, copyTable(routeTable));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(Pair&lt;String, List&lt;Message&gt;&gt; msg)</span> </span>&#123; <span class="comment">// 接收路由表</span></span><br><span class="line"><span class="keyword">if</span> (!work) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">String sourceRoute = msg.getFirst(); <span class="comment">// 源路由器</span></span><br><span class="line">List&lt;Message&gt; msg1 = copyTable(msg.getSecond()); <span class="comment">// 路由表</span></span><br><span class="line">changeRouteStatus(sourceRoute); <span class="comment">// 修改发送时钟</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; msg1.size(); i++) &#123; <span class="comment">// 对报文中所有项目进行更改</span></span><br><span class="line">Message m = msg1.get(i);</span><br><span class="line">m.setDist(m.getDist() + <span class="number">1</span>);</span><br><span class="line">m.setNextRouter(sourceRoute);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (mq) &#123;</span><br><span class="line">mq.add(msg1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertIntoLog</span><span class="params">(Message m1, Message m2)</span> </span>&#123; <span class="comment">// 将更新记录插入更新日志</span></span><br><span class="line">SimpleDateFormat tf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);</span><br><span class="line">Message mm1 = <span class="keyword">new</span> Message(m1);</span><br><span class="line">Message mm2 = <span class="keyword">new</span> Message(m2);</span><br><span class="line">String date = tf.format(<span class="keyword">new</span> Date());</span><br><span class="line">updateLog.add(<span class="keyword">new</span> UpdateInfo(mm1, mm2, date));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeRouteStatus</span><span class="params">(String rt)</span> </span>&#123; <span class="comment">// 收到新消息后，修改接收时钟</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clock.size(); i++) &#123;</span><br><span class="line">ReceiveClock rc = clock.get(i);</span><br><span class="line"><span class="keyword">if</span> (rc.getRouter() == rt) &#123;</span><br><span class="line">rc.setTimes(System.currentTimeMillis() + delay);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkRouteStatus</span><span class="params">()</span> </span>&#123; <span class="comment">// 检查是否在规定时间内收到相邻路由器的信息，并修改状态</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clock.size(); i++) &#123;</span><br><span class="line">ReceiveClock rc = clock.get(i);</span><br><span class="line"><span class="keyword">if</span> (System.currentTimeMillis() &gt; rc.getTimes()) &#123;</span><br><span class="line">setRouterBroken(rc.getRouter());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateRoute</span><span class="params">()</span> </span>&#123; <span class="comment">// 更新路由表</span></span><br><span class="line">checkRouteStatus(); <span class="comment">// 检查状态</span></span><br><span class="line"><span class="keyword">synchronized</span>(routeTable) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(mq) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mq.isEmpty()) &#123;</span><br><span class="line">List&lt;Message&gt; list = mq.poll();</span><br><span class="line"><span class="keyword">for</span> (Message msg: list) &#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; routeTable.size(); i++) &#123;</span><br><span class="line">Message m = routeTable.get(i);</span><br><span class="line"><span class="keyword">if</span> (m.getNetName() == msg.getNetName()) &#123; <span class="comment">// 若有到N的路由</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (msg.getDist() &gt;= <span class="number">16</span>) &#123;</span><br><span class="line">msg.setDist(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m.getNextRouter() == msg.getNextRouter()) &#123; <span class="comment">// 若下一跳为 X</span></span><br><span class="line">insertIntoLog(<span class="keyword">new</span> Message(m), <span class="keyword">new</span> Message(msg)); <span class="comment">// 更新日志</span></span><br><span class="line">m.setDist(msg.getDist());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (m.getDist() &gt; msg.getDist()) &#123; <span class="comment">// 否则比较距离再更新</span></span><br><span class="line">insertIntoLog(<span class="keyword">new</span> Message(m), <span class="keyword">new</span> Message(msg)); <span class="comment">// 更新日志</span></span><br><span class="line">m.setDist(msg.getDist());</span><br><span class="line">m.setNextRouter(msg.getNextRouter());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123; <span class="comment">// 若无到网络 N 的路由，则添加</span></span><br><span class="line">routeTable.add(<span class="keyword">new</span> Message(msg));</span><br><span class="line">insertIntoLog(<span class="keyword">new</span> Message(), <span class="keyword">new</span> Message(msg));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showRouteTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">s += name + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;路由表&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">s += <span class="string">&quot;网络 \t 距离 \t 下一跳&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (Message m: routeTable) &#123;</span><br><span class="line">s += m.toLocalString() + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showLog</span><span class="params">()</span> </span>&#123; <span class="comment">// 展示学习日志</span></span><br><span class="line">String s = <span class="string">&quot;\t+--------------------------+&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">s += <span class="string">&quot;\t | &quot;</span> + name + <span class="string">&quot;\t &quot;</span> + <span class="string">&quot;学习日志&quot;</span> + <span class="string">&quot; |&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">s += <span class="string">&quot;\t+--------------------------+&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">s += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">s += <span class="string">&quot;原信息项 \t\t 新信息项 \t\t 时间&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">s += <span class="string">&quot;--------------------------------------------------&quot;</span>;</span><br><span class="line">s += <span class="string">&quot;--------------------------------------------------&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; updateLog.size(); i++) &#123;</span><br><span class="line">Message m1 = updateLog.get(i).getM1();</span><br><span class="line">Message m2 = updateLog.get(i).getM2();</span><br><span class="line">String times = updateLog.get(i).getDate();</span><br><span class="line">s += m1 + <span class="string">&quot; \t &quot;</span> + m2 + <span class="string">&quot; \t &quot;</span> + times + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReceiveClock</span> </span>&#123; <span class="comment">// 接收消息时钟</span></span><br><span class="line"><span class="keyword">private</span> String router;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> times;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReceiveClock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">router = <span class="keyword">null</span>;</span><br><span class="line">times = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReceiveClock</span><span class="params">(String router, <span class="keyword">long</span> times)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.router = router;</span><br><span class="line"><span class="keyword">this</span>.times = times;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRouter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRouter</span><span class="params">(String router)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.router = router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> times;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimes</span><span class="params">(<span class="keyword">long</span> times)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.times = times;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateInfo</span> </span>&#123; <span class="comment">// 更新日志信息项</span></span><br><span class="line"><span class="keyword">private</span> Message m1;</span><br><span class="line"><span class="keyword">private</span> Message m2;</span><br><span class="line"><span class="keyword">private</span> String date;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UpdateInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UpdateInfo</span><span class="params">(Message m1, Message m2, String date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.m1 = m1;</span><br><span class="line"><span class="keyword">this</span>.m2 = m2;</span><br><span class="line"><span class="keyword">this</span>.date = date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">getM1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> m1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">getM2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> m2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateRouteTable</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; <span class="comment">// 更新线程</span></span><br><span class="line"><span class="keyword">private</span> Router router;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UpdateRouteTable</span><span class="params">(Router router)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.router = router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">50</span>);</span><br><span class="line">router.updateRoute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendRouteTable</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; <span class="comment">// 发送线程</span></span><br><span class="line"><span class="keyword">private</span> Router router;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SendRouteTable</span><span class="params">(Router router)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.router = router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 一秒钟发一次路由表</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">router.sendMessage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Window.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Container;</span><br><span class="line"><span class="keyword">import</span> java.awt.FlowLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.GridLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.AbstractAction;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JCheckBox;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JComboBox;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JLabel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JScrollPane;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTextArea;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTextField;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.EtchedBorder;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String lyq[]= &#123;<span class="string">&quot;路由器1&quot;</span>,<span class="string">&quot;路由器2&quot;</span>,<span class="string">&quot;路由器3&quot;</span>,<span class="string">&quot;路由器4&quot;</span>,<span class="string">&quot;路由器5&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">private</span> String wl[]= &#123;<span class="string">&quot;网络1&quot;</span>,<span class="string">&quot;网络2&quot;</span>,<span class="string">&quot;网络3&quot;</span>,<span class="string">&quot;网络4&quot;</span>,<span class="string">&quot;网络5&quot;</span>,<span class="string">&quot;网络6&quot;</span>,<span class="string">&quot;网络7&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">private</span> String jb[]= &#123;<span class="string">&quot;保存&quot;</span>,<span class="string">&quot;重置&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">private</span> JButton jbt[];<span class="comment">//按钮</span></span><br><span class="line"><span class="keyword">private</span> JCheckBox jcb[];<span class="comment">//选择</span></span><br><span class="line"><span class="keyword">private</span> JPanel JP1,JP2,jp,jp1,jp2,jp3,jp4,jp5,jp6;<span class="comment">//面板</span></span><br><span class="line"><span class="keyword">private</span> Container cp;<span class="comment">//容器</span></span><br><span class="line"><span class="keyword">private</span> JLabel jl1,jl2,jl3;<span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> JLabel jl[];<span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> NetWork net[];</span><br><span class="line"><span class="keyword">private</span> Router rt[];</span><br><span class="line"><span class="keyword">private</span> JComboBox&lt;String&gt; jcbb;</span><br><span class="line"><span class="keyword">private</span> JScrollPane jsp1;<span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> JTextArea jta1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.paint(g);</span><br><span class="line"><span class="comment">//    if (net[1].isWork()) &#123;</span></span><br><span class="line">    g.drawLine(<span class="number">10</span>,<span class="number">180</span>,<span class="number">90</span>,<span class="number">130</span>);<span class="comment">//网络1</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    if (net[2].isWork()) &#123;</span></span><br><span class="line">    g.drawLine(<span class="number">110</span>,<span class="number">130</span>,<span class="number">270</span>,<span class="number">130</span>);<span class="comment">//网络2</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    if (net[3].isWork()) &#123;</span></span><br><span class="line">    g.drawLine(<span class="number">347</span>,<span class="number">130</span>,<span class="number">450</span>,<span class="number">130</span>);<span class="comment">//网络3</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    if (net[4].isWork()) &#123;</span></span><br><span class="line">    g.drawLine(<span class="number">527</span>,<span class="number">130</span>,<span class="number">660</span>,<span class="number">150</span>);<span class="comment">//网络4</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    if (net[5].isWork()) &#123;</span></span><br><span class="line">    g.drawLine(<span class="number">110</span>,<span class="number">130</span>,<span class="number">170</span>,<span class="number">230</span>);<span class="comment">//网络5</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    if (net[6].isWork()) &#123;</span></span><br><span class="line">    g.drawLine(<span class="number">247</span>,<span class="number">230</span>,<span class="number">350</span>,<span class="number">230</span>);<span class="comment">//网络6</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    if (net[7].isWork()) &#123;</span></span><br><span class="line">    g.drawLine(<span class="number">427</span>,<span class="number">230</span>,<span class="number">450</span>,<span class="number">150</span>);<span class="comment">//网络7</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Window</span><span class="params">(NetWork[] net, Router[] rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.net = net;</span><br><span class="line"><span class="keyword">this</span>.rt = rt;</span><br><span class="line"><span class="keyword">this</span>.setBounds(<span class="number">100</span>, <span class="number">200</span>, <span class="number">1400</span>, <span class="number">600</span>);<span class="comment">//设置窗口大小和位置</span></span><br><span class="line">cp=<span class="keyword">this</span>.getContentPane();</span><br><span class="line">cp.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">JP1=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">jp=<span class="keyword">new</span> JPanel();</span><br><span class="line">jp.setLayout(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">jbt=<span class="keyword">new</span> JButton[<span class="number">7</span>];</span><br><span class="line">jbt[<span class="number">0</span>]=<span class="keyword">new</span> JButton(lyq[<span class="number">0</span>]);</span><br><span class="line">jbt[<span class="number">0</span>].setBounds(<span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">40</span>);</span><br><span class="line">jbt[<span class="number">1</span>]=<span class="keyword">new</span> JButton(lyq[<span class="number">1</span>]);</span><br><span class="line">jbt[<span class="number">1</span>].setBounds(<span class="number">260</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">40</span>);</span><br><span class="line">jbt[<span class="number">2</span>]=<span class="keyword">new</span> JButton(lyq[<span class="number">2</span>]);</span><br><span class="line">jbt[<span class="number">2</span>].setBounds(<span class="number">440</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">40</span>);</span><br><span class="line">jbt[<span class="number">3</span>]=<span class="keyword">new</span> JButton(lyq[<span class="number">3</span>]);</span><br><span class="line">jbt[<span class="number">3</span>].setBounds(<span class="number">160</span>, <span class="number">180</span>, <span class="number">80</span>, <span class="number">40</span>);</span><br><span class="line">jbt[<span class="number">4</span>]=<span class="keyword">new</span> JButton(lyq[<span class="number">4</span>]);</span><br><span class="line">jbt[<span class="number">4</span>].setBounds(<span class="number">340</span>, <span class="number">180</span>, <span class="number">80</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">jp.add(jbt[<span class="number">0</span>]);</span><br><span class="line">jp.add(jbt[<span class="number">1</span>]);</span><br><span class="line">jp.add(jbt[<span class="number">2</span>]);</span><br><span class="line">jp.add(jbt[<span class="number">3</span>]);</span><br><span class="line">jp.add(jbt[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">jl=<span class="keyword">new</span> JLabel[wl.length];</span><br><span class="line">jl[<span class="number">0</span>]=<span class="keyword">new</span> JLabel();</span><br><span class="line">jl[<span class="number">0</span>].setBounds(<span class="number">4</span>, <span class="number">65</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">jl[<span class="number">0</span>].setText(wl[<span class="number">0</span>]);</span><br><span class="line">jl[<span class="number">0</span>].setForeground(Color.RED);</span><br><span class="line">jl[<span class="number">1</span>]=<span class="keyword">new</span> JLabel();</span><br><span class="line">jl[<span class="number">1</span>].setBounds(<span class="number">190</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">jl[<span class="number">1</span>].setText(wl[<span class="number">1</span>]);</span><br><span class="line">jl[<span class="number">1</span>].setForeground(Color.RED);</span><br><span class="line">jl[<span class="number">2</span>]=<span class="keyword">new</span> JLabel();</span><br><span class="line">jl[<span class="number">2</span>].setBounds(<span class="number">370</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">jl[<span class="number">2</span>].setText(wl[<span class="number">2</span>]);</span><br><span class="line">jl[<span class="number">2</span>].setForeground(Color.RED);</span><br><span class="line">jl[<span class="number">3</span>]=<span class="keyword">new</span> JLabel();</span><br><span class="line">jl[<span class="number">3</span>].setBounds(<span class="number">565</span>, <span class="number">55</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">jl[<span class="number">3</span>].setText(wl[<span class="number">3</span>]);</span><br><span class="line">jl[<span class="number">3</span>].setForeground(Color.RED);</span><br><span class="line">jl[<span class="number">4</span>]=<span class="keyword">new</span> JLabel();</span><br><span class="line">jl[<span class="number">4</span>].setBounds(<span class="number">75</span>, <span class="number">140</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">jl[<span class="number">4</span>].setText(wl[<span class="number">4</span>]);</span><br><span class="line">jl[<span class="number">4</span>].setForeground(Color.RED);</span><br><span class="line">jl[<span class="number">5</span>]=<span class="keyword">new</span> JLabel();</span><br><span class="line">jl[<span class="number">5</span>].setBounds(<span class="number">270</span>, <span class="number">145</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">jl[<span class="number">5</span>].setText(wl[<span class="number">5</span>]);</span><br><span class="line">jl[<span class="number">5</span>].setForeground(Color.RED);</span><br><span class="line">jl[<span class="number">6</span>]=<span class="keyword">new</span> JLabel();</span><br><span class="line">jl[<span class="number">6</span>].setBounds(<span class="number">457</span>, <span class="number">130</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">jl[<span class="number">6</span>].setText(wl[<span class="number">6</span>]);</span><br><span class="line">jl[<span class="number">6</span>].setForeground(Color.RED);</span><br><span class="line"></span><br><span class="line">jp.add(jl[<span class="number">0</span>]);</span><br><span class="line">jp.add(jl[<span class="number">1</span>]);</span><br><span class="line">jp.add(jl[<span class="number">2</span>]);</span><br><span class="line">jp.add(jl[<span class="number">3</span>]);</span><br><span class="line">jp.add(jl[<span class="number">4</span>]);</span><br><span class="line">jp.add(jl[<span class="number">5</span>]);</span><br><span class="line">jp.add(jl[<span class="number">6</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jp.setBorder(<span class="keyword">new</span> EtchedBorder(EtchedBorder.RAISED));<span class="comment">//边界</span></span><br><span class="line">JP1.add(jp);</span><br><span class="line"></span><br><span class="line">jp1=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">5</span>,<span class="number">1</span>));</span><br><span class="line">jp2=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">jl1=<span class="keyword">new</span> JLabel(<span class="string">&quot;请勾选有故障的路由器：&quot;</span>);</span><br><span class="line">jp2.add(jl1);</span><br><span class="line">jp1.add(jp2);</span><br><span class="line"></span><br><span class="line">jp3=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">jcb=<span class="keyword">new</span> JCheckBox[lyq.length+wl.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lyq.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">jcb[i]=<span class="keyword">new</span> JCheckBox(lyq[i]);</span><br><span class="line">jp3.add(jcb[i]);</span><br><span class="line">&#125;</span><br><span class="line">jp3.setBorder(<span class="keyword">new</span> EtchedBorder(EtchedBorder.RAISED));<span class="comment">//边界</span></span><br><span class="line">jp1.add(jp3);</span><br><span class="line"></span><br><span class="line">jp4=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">jl2=<span class="keyword">new</span> JLabel(<span class="string">&quot;请勾选有故障的网络：&quot;</span>);</span><br><span class="line">jp4.add(jl2);</span><br><span class="line">jp1.add(jp4);</span><br><span class="line"></span><br><span class="line">jp5=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;wl.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">jcb[i+lyq.length]=<span class="keyword">new</span> JCheckBox(wl[i]);</span><br><span class="line">jp5.add(jcb[i+lyq.length]);</span><br><span class="line">&#125;</span><br><span class="line">jp5.setBorder(<span class="keyword">new</span> EtchedBorder(EtchedBorder.RAISED));<span class="comment">//边界</span></span><br><span class="line">jp1.add(jp5);</span><br><span class="line"></span><br><span class="line">jp6=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">jbt[<span class="number">5</span>]=<span class="keyword">new</span> JButton(jb[<span class="number">0</span>]);</span><br><span class="line">jbt[<span class="number">6</span>]=<span class="keyword">new</span> JButton(jb[<span class="number">1</span>]);</span><br><span class="line">jp6.add(jbt[<span class="number">5</span>]);</span><br><span class="line">jp6.add(jbt[<span class="number">6</span>]);</span><br><span class="line">jp1.add(jp6);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">jbt[i].addActionListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JP1.add(jp1);</span><br><span class="line">JP1.setBorder(<span class="keyword">new</span> EtchedBorder(EtchedBorder.RAISED));<span class="comment">//边界</span></span><br><span class="line">cp.add(JP1);</span><br><span class="line">JP2=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">jl3=<span class="keyword">new</span> JLabel();</span><br><span class="line">jl3.setText(<span class="string">&quot;选择路由器查看路由表更新日志：&quot;</span>);</span><br><span class="line">JP2.add(jl3);</span><br><span class="line">jcbb=<span class="keyword">new</span> JComboBox&lt;String&gt;(lyq);</span><br><span class="line">jcbb.addActionListener(<span class="keyword">new</span> ActionListen());</span><br><span class="line">JP2.add(jcbb);</span><br><span class="line">    jta1 = <span class="keyword">new</span> JTextArea(<span class="number">20</span>, <span class="number">35</span>);</span><br><span class="line">jta1.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, Font.BOLD, <span class="number">18</span>));</span><br><span class="line">JScrollPane jsp1 = <span class="keyword">new</span> JScrollPane(jta1);</span><br><span class="line">jsp1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);</span><br><span class="line">jsp1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);</span><br><span class="line">JP2.add(jsp1);</span><br><span class="line">cp.add(JP2);</span><br><span class="line"><span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//public static void main(String args[])</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//new Window(null, null);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span>((JButton)e.getSource()==jbt[<span class="number">5</span>])<span class="comment">//点击保存按钮</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lyq.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(jcb[i].isSelected())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> (rt[i + <span class="number">1</span>].isWork()) &#123;</span><br><span class="line">    rt[i + <span class="number">1</span>].stop();<span class="comment">//路由器线程暂停</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!rt[i + <span class="number">1</span>].isWork()) &#123;</span><br><span class="line">    rt[i + <span class="number">1</span>].start();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; wl.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(jcb[i + lyq.length].isSelected())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> (net[i + <span class="number">1</span>].isWork()) &#123;</span><br><span class="line">    net[i+<span class="number">1</span>].stop();</span><br><span class="line">    jl[i].setForeground(Color.green);<span class="comment">//网络线程关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!net[i + <span class="number">1</span>].isWork()) &#123;</span><br><span class="line">    net[i+<span class="number">1</span>].start();</span><br><span class="line">    jl[i].setForeground(Color.red);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((JButton)e.getSource() == jbt[<span class="number">6</span>])<span class="comment">//点击重置按钮</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wl.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">jcb[i + lyq.length].setSelected(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (net[i + <span class="number">1</span>].isWork()) &#123;</span><br><span class="line">net[i + <span class="number">1</span>].stop();</span><br><span class="line">&#125;</span><br><span class="line">    net[i + <span class="number">1</span>].start();</span><br><span class="line">    jl[i].setForeground(Color.red);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//路由器+网络线程全部设为工作状态</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lyq.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">jcb[i].setSelected(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (rt[i + <span class="number">1</span>].isWork()) &#123;</span><br><span class="line">rt[i + <span class="number">1</span>].stop();</span><br><span class="line">&#125;</span><br><span class="line">rt[i + <span class="number">1</span>].start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((JButton)e.getSource()==jbt[<span class="number">0</span>])<span class="comment">//点击路由器1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> SubWindow(rt[<span class="number">1</span>].showRouteTable());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((JButton)e.getSource()==jbt[<span class="number">1</span>])<span class="comment">//点击路由器2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> SubWindow(rt[<span class="number">2</span>].showRouteTable());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((JButton)e.getSource()==jbt[<span class="number">2</span>])<span class="comment">//点击路由器3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> SubWindow(rt[<span class="number">3</span>].showRouteTable());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((JButton)e.getSource()==jbt[<span class="number">3</span>])<span class="comment">//点击路由器4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> SubWindow(rt[<span class="number">4</span>].showRouteTable());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((JButton)e.getSource()==jbt[<span class="number">4</span>])<span class="comment">//点击路由器5</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> SubWindow(rt[<span class="number">5</span>].showRouteTable());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionListen</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((String)jcbb.getSelectedItem()==<span class="string">&quot;路由器1&quot;</span>)<span class="comment">//选择路由器1查看路由表更新日志</span></span><br><span class="line">&#123;</span><br><span class="line">jta1.setText(rt[<span class="number">1</span>].showLog());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((String)jcbb.getSelectedItem()==<span class="string">&quot;路由器2&quot;</span>)<span class="comment">//选择路由器2查看路由表更新日志</span></span><br><span class="line">&#123;</span><br><span class="line">jta1.setText(rt[<span class="number">2</span>].showLog());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((String)jcbb.getSelectedItem()==<span class="string">&quot;路由器3&quot;</span>)<span class="comment">//选择路由器3查看路由表更新日志</span></span><br><span class="line">&#123;</span><br><span class="line">jta1.setText(rt[<span class="number">3</span>].showLog());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((String)jcbb.getSelectedItem()==<span class="string">&quot;路由器4&quot;</span>)<span class="comment">//选择路由器4查看路由表更新日志</span></span><br><span class="line">&#123;</span><br><span class="line">jta1.setText(rt[<span class="number">4</span>].showLog());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((String)jcbb.getSelectedItem()==<span class="string">&quot;路由器5&quot;</span>)<span class="comment">//选择路由器5查看路由表更新日志</span></span><br><span class="line">&#123;</span><br><span class="line">jta1.setText(rt[<span class="number">5</span>].showLog());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SubWindow.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Container;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JScrollPane;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTextArea;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubWindow</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> JScrollPane jsp;<span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> Container con;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SubWindow</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.setBounds(<span class="number">470</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">400</span>);<span class="comment">//设置窗口大小和位置</span></span><br><span class="line">con=<span class="keyword">new</span> Container();</span><br><span class="line">con=<span class="keyword">this</span>.getContentPane();</span><br><span class="line">JTextArea jta = <span class="keyword">new</span> JTextArea(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">jta.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, Font.BOLD, <span class="number">18</span>));</span><br><span class="line">jta.setText(s);</span><br><span class="line">JScrollPane jsp = <span class="keyword">new</span> JScrollPane(jta);</span><br><span class="line">jsp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);</span><br><span class="line">jsp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);</span><br><span class="line">con.add(jsp);</span><br><span class="line"><span class="keyword">this</span>.setTitle(<span class="string">&quot;路由表&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 82177</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@introduction</span> 运行类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Router[] rt;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> NetWork[] net;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addRouter</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">rt = <span class="keyword">new</span> Router[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">rt[i] = <span class="keyword">new</span> Router(<span class="string">&quot;路由器&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addNetWork</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">net = <span class="keyword">new</span> NetWork[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">net[i] = <span class="keyword">new</span> NetWork(<span class="string">&quot;网络&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rt[<span class="number">1</span>].connectNetWork(net[<span class="number">1</span>]);</span><br><span class="line">rt[<span class="number">1</span>].connectNetWork(net[<span class="number">2</span>]);</span><br><span class="line">rt[<span class="number">1</span>].connectNetWork(net[<span class="number">5</span>]);</span><br><span class="line">rt[<span class="number">1</span>].connectRouter(rt[<span class="number">2</span>]);</span><br><span class="line">rt[<span class="number">1</span>].connectRouter(rt[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">rt[<span class="number">2</span>].connectNetWork(net[<span class="number">2</span>]);</span><br><span class="line">rt[<span class="number">2</span>].connectNetWork(net[<span class="number">3</span>]);</span><br><span class="line">rt[<span class="number">2</span>].connectRouter(rt[<span class="number">1</span>]);</span><br><span class="line">rt[<span class="number">2</span>].connectRouter(rt[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">rt[<span class="number">3</span>].connectNetWork(net[<span class="number">3</span>]);</span><br><span class="line">rt[<span class="number">3</span>].connectNetWork(net[<span class="number">4</span>]);</span><br><span class="line">rt[<span class="number">3</span>].connectNetWork(net[<span class="number">7</span>]);</span><br><span class="line">rt[<span class="number">3</span>].connectRouter(rt[<span class="number">2</span>]);</span><br><span class="line">rt[<span class="number">3</span>].connectRouter(rt[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">rt[<span class="number">4</span>].connectNetWork(net[<span class="number">5</span>]);</span><br><span class="line">rt[<span class="number">4</span>].connectNetWork(net[<span class="number">6</span>]);</span><br><span class="line">rt[<span class="number">4</span>].connectRouter(rt[<span class="number">1</span>]);</span><br><span class="line">rt[<span class="number">4</span>].connectRouter(rt[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">rt[<span class="number">5</span>].connectNetWork(net[<span class="number">6</span>]);</span><br><span class="line">rt[<span class="number">5</span>].connectNetWork(net[<span class="number">7</span>]);</span><br><span class="line">rt[<span class="number">5</span>].connectRouter(rt[<span class="number">3</span>]);</span><br><span class="line">rt[<span class="number">5</span>].connectRouter(rt[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">net[<span class="number">1</span>].connectRouter(rt[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">net[<span class="number">2</span>].connectRouter(rt[<span class="number">1</span>]);</span><br><span class="line">net[<span class="number">2</span>].connectRouter(rt[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">net[<span class="number">3</span>].connectRouter(rt[<span class="number">2</span>]);</span><br><span class="line">net[<span class="number">3</span>].connectRouter(rt[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">net[<span class="number">4</span>].connectRouter(rt[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">net[<span class="number">5</span>].connectRouter(rt[<span class="number">1</span>]);</span><br><span class="line">net[<span class="number">5</span>].connectRouter(rt[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">net[<span class="number">6</span>].connectRouter(rt[<span class="number">4</span>]);</span><br><span class="line">net[<span class="number">6</span>].connectRouter(rt[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">net[<span class="number">7</span>].connectRouter(rt[<span class="number">3</span>]);</span><br><span class="line">net[<span class="number">7</span>].connectRouter(rt[<span class="number">5</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startRouter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">rt[i].start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startNetWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">net[i].start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showRouteTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">rt[i].showRouteTable();</span><br><span class="line">rt[i].showLog();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">addRouter(<span class="number">5</span>);</span><br><span class="line">addNetWork(<span class="number">7</span>);</span><br><span class="line">initConnection();</span><br><span class="line">startRouter();</span><br><span class="line">startNetWork();</span><br><span class="line"><span class="keyword">new</span> Window(net, rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件全部放到一个默认Pakage里就能运行了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结束与新的开始</title>
      <link href="2019/11/11/%E7%BB%93%E6%9D%9F%E4%B8%8E%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>2019/11/11/%E7%BB%93%E6%9D%9F%E4%B8%8E%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>怎么说呢，下半年的两场区域赛总算是结束了，一场南京，一场南昌。</p><p>两年了，到这个时候算是暂时落幕了，以前有时候会觉得训练赛有点烦，毕竟平时事情还是比较多的，现在总算是清闲下来了，感到高兴吗？会感觉稍微松了一口气。高兴，会吗？远远谈不上，感到迷茫和空洞倒是真的。</p><p>大一上刚刚接触的ACM时候，感到非常地开心，喜欢这种AC题目的感觉，也因此开始准备下学期的新生赛。到了新生赛的时候，由于在比赛中途出现的种种失误（也不能叫失误吧，就是比赛没打好），搞得心态有点崩，一度想要放弃。。。大一下去外面的一系列比赛打得非常糟糕，那时还挺难过的。</p><p>大二上由于整体状态下滑，心理很不稳定，经常怀疑自己是不是选错了专业，为什么要来读软件工程，为什么要打ACM，甚至想过转专业到数院去（我高中的时候非常喜欢数学），虽然此时已经不能转专业了。自己也忘了大二上是怎么度过的了，但没怎么写题倒是真的。</p><p>大二下思想回到正轨，好好训练，好好读书，好好做该做的事情，不虚度光阴，拿到了省赛银和邀请赛铜奖。</p><p>这个学期备战两场区域赛，已经过去的两个月一直在刷题。</p><p>一站铁牌，一站银牌，还算是不错的收尾。</p><p>这就是我的ACM简历，看起来乏善可陈，主要是因为本人语言功底实在是不行，期间有很多有趣的人和事，都是我最珍贵的记忆。</p><h3 id="南京站"><a href="#南京站" class="headerlink" title="南京站"></a>南京站</h3><p>这一站总体来说，非常地糟糕，无论从行程，状态，还是配合上来说，都是灾难性的。</p><p>首先是行程，这个其实没有太多好说的，其实就是我安排了一个非常low的行程，搞得大家状态都很差，然后状态上，咋说呢，他们两个我不太清楚，但是我状态是挺差的，虽然赛前一直在刷题，但是由于我们训练赛时人经常不齐，导致也没有什么配合。我们的K题WA了整整7、8次才AC，所以我在比赛途中再一次自闭，是真正的自闭，题目也看不进了，而且由于我的失误，把队友本来已经敲好的代码给弄丢了，幸好之前让志愿者打印了一份纸质的，不然就真的完蛋了。最后，理所当然的打铁了。</p><p>赛前的准备也很差，队伍差不多是一个松懈的状态，板子和字典是出发前一天晚上临时找的，比赛前还在看比赛刷B站，没有认识到这场比赛的重要性。</p><h3 id="南昌站"><a href="#南昌站" class="headerlink" title="南昌站"></a>南昌站</h3><p>这次吸取了前面的教训，但由于两场区域赛之间只隔了两周，我们只打了三场训练赛，但是效果还不错，至少有了一定的配合。</p><p>行程上，9号热身赛，10号正式赛，我们8号下午就坐飞机到了南昌，晚上不是玩手机，而是大家自己好好刷题，9号的热身赛打的还不错，晚上接着继续写题，保持手感，比赛时，比上次的配合肯定是好到不知道哪里去了，交流也比较透彻，虽然还有不尽人意的地方，但还是稳稳地拿下了银牌。</p><p><img src="/2019/11/11/%E7%BB%93%E6%9D%9F%E4%B8%8E%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/2.jpg" alt="和队友们合影留念"></p><p>第一次交题与AC，在自己学校的VJ上</p><p><img src="/2019/11/11/%E7%BB%93%E6%9D%9F%E4%B8%8E%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/1.png" alt="第一次AC题目"></p><p>真怀念呀，两年来的人与事。</p><p>非常感谢我们的教练，会长与队员们，有你们的陪伴，我才能坚持下来。</p><p>我与ACM的故事要暂时告一段落了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>徐州网络赛 H</title>
      <link href="2019/10/21/%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B-H/"/>
      <url>2019/10/21/%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B-H/</url>
      
        <content type="html"><![CDATA[<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p>For <script type="math/tex">n=p_{1}^{k_1} p_{2}^{k_2} \cdots p_{m}^{k_m}</script> , define <script type="math/tex">f(n)=k_1 +k_2 + \cdots + k_m</script>, please calculate<script type="math/tex">\sum_{i=1}^n f(i!) \% 998244353</script></p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>There is a single integer <script type="math/tex">n</script>(<script type="math/tex">1 \le n \le 10^{10}</script>).</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Print a single line containing an integer, denoting the ans.</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">66</span><br></pre></td></tr></table></figure><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>见题面描述</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>。。。。。。。。。。。。。。。。。。。。</p><p>min25筛好难啊，比杜教筛难了一个等级…….。</p><p>杜教筛其实就是基于狄利克雷卷积和常用的积性函数进行求和变换的一个套路，代码敲起来也比较简单，感觉和筛搭不上什么关系……。</p><p>min25筛才是名副其实的筛法的思想，然后形式上是一个 $dp$ 的转移方程，理解起来有挺大的难度，代码也不是很好写。</p><p>推荐两个教程：</p><p><a href="https://www.cnblogs.com/heyuhhh/p/11421209.html">min25筛学习总结</a></p><p><a href="https://cmxrynp.github.io/2018/12/03/Min-25筛学习笔记/">Min_25筛学习笔记</a></p><p>min25筛要记住两个重要的公式：</p><hr><script type="math/tex; mode=display">g(a, b) = \begin{cases} g(a, b - 1) &p_b^2>a\\ g(a, b - 1) - f(p_b)\cdot(g(\lfloor \frac{a}{p_b}\rfloor, b - 1) - g(p_{b-1}, \infty)) &p_b^2\le a\end{cases}</script><hr><script type="math/tex; mode=display">S(a, b) = \begin{cases}0 &a<p_b\\g(a, \infty) - g(p_{b-1}, \infty) + \sum_{i=b}^{p_i^2\le a}\sum_{t=1}^{p_i^{t+1}\le a}(f(p_i^t)\cdot S(\lfloor \frac{a}{p_i^t}\rfloor, i + 1) + f(p_i^{t+1})) &a\ge p_b\end{cases}</script><hr><p>首先，很显然有 $f(ab) = f(a) + f(b)$ ，所以有：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}f(i!)\\\begin{align}&=\sum_{i=1}^{n}\sum_{j=1}^{i}f(j)    \tag{1}\\&=\sum_{i=1}^{n}(n-i+1)f(i)    \tag{2}\\&=(n+1)\sum_{i=1}^{n}f(i)-\sum_{i=1}^{n}i\cdot f(i) \tag{3}\end{align}</script><p>由 (1) 得到 (2) 只需要考虑每一个 $f(i)$ 的贡献即可，(2) 到 (3) 是简单的拆分。</p><p>好了，接下来是重头戏。</p><p>考虑 $\sum_{i=1}^{n}f(i)$ ，先说结论：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}f(i) = \sum_{i=1}^{n}isprime(i)\sum_{t=1}^{i^t\le n}\lfloor \frac{n}{i^t}\rfloor</script><p>证明：</p><p>考虑到 $f$ 的定义,，若 $i = p_1^{k_1}p_2^{k_2}…p_m^{k_m}$ ，则 $f(i) = k_1 + k_2 + … + k_m$ ，意思就是，对于 $i$ 来说，若其被 $p_j$ 整除，则答案要加 $1$ ，被 $p_j^2$ 整除，再加 $1$ ，一直到 $p_j^{k_j} $ ，总共加了 $k_j$ 个 $1$，所以我们只需要对每一个质数及其次幂的贡献考虑，$[1, n]$ 的范围内有多少个数是该质数及其次幂的倍数。</p><p>同理，$i\cdot f(i) = i \times (k_1 + k_2 + … + k_m)$ ，每有一个质数或其次幂整除 $i$ ，则该式要多加上一个 $i$ ，所以有：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}i\cdot f(i) \\\begin{align}&= \sum_{i = 1}^{n}isprime(i)\sum_{t = 1}^{i^t\le n}\sum_{i^t|d}d\\&= \sum_{i = 1}^{n}isprime(i)\sum_{t = 1}^{i^t\le n}i^t\sum_{j=1}^{\lfloor\frac{n}{i^t}\rfloor}j\\&= \sum_{i = 1}^{n}isprime(i)\sum_{t = 1}^{i^t\le n}i^t\cdot \frac{\lfloor\frac{n}{i^t}\rfloor\cdot(\lfloor\frac{n}{i^t}\rfloor + 1)}{2}\end{align}</script><hr><p>公式推完之后，接下来考虑怎么计算。</p><p>把质数分成两部分，一部分是小于等于 $\sqrt{n}$ 的，另一部分是大于 $\sqrt{n}$ 的，小于等于的一部分的贡献可以直接利用上面的式子暴力计算，但是，对于大于的那一部分，是不能直接求得，我们不可能把到 $1e10$ 的质数全部求出来，注意到，对于大于 $\sqrt{n}$ 的那一部分质数，公式里的 $t$ 只能等于 $1$ ，化简之后即为：</p><script type="math/tex; mode=display">\sum f(i) = \sum1 = g1(n, \infty) - g1(\sqrt{n}, \infty)\\\sum i\cdot f(i) = \sum i = g2(n, \infty) - g2(\sqrt{n}, \infty)</script><p>其中 $g1(a, b)$  表示 $[1, a]$ 的数被第 $b$ 个质数筛过之后还剩下多少个数，$g2(a, b)$  表示 $[1, a]$ 的数被第 $b$ 个质数筛过之后剩下的数的和。</p><p>这两个 $g$ 的求法是min25筛的拿手好戏。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> prime[maxn];</span><br><span class="line">ll a[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">ll g1[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">ll g2[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">ll f[maxn];</span><br><span class="line">ll inv2, n, sq;</span><br><span class="line"><span class="keyword">int</span> m, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eular</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  vis[<span class="number">0</span>] = vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">      prime[++tot] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * prime[j] &lt; maxn; j++) &#123;</span><br><span class="line">      vis[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span><br><span class="line">    f[i] = (f[i - <span class="number">1</span>] + prime[i]) % mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(ll x)</span> </span>&#123; <span class="keyword">return</span> x &lt;= sq ? x : m - n / x + <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  eular();</span><br><span class="line">  inv2 = (mod + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">  sq = <span class="built_in">sqrt</span>(n + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (ll l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">    r = n / (n / l);</span><br><span class="line">    a[++m] = r;</span><br><span class="line">    g1[m] = (r - <span class="number">1</span>) % mod;</span><br><span class="line">    g2[m] = (r + <span class="number">2</span>) % mod * (r - <span class="number">1</span>) % mod * inv2 % mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot &amp;&amp; prime[i] &lt;= sq; i++) &#123;</span><br><span class="line">    ll tmp = <span class="number">1l</span>l * prime[i] * prime[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = m; a[j] &gt;= tmp; j--) &#123;</span><br><span class="line">      g1[j] -= (g1[id(a[j] / prime[i])] - (i - <span class="number">1</span>)) % mod;</span><br><span class="line">      g2[j] -= prime[i] * (g2[id(a[j] / prime[i])] - f[i - <span class="number">1</span>]) % mod;</span><br><span class="line">      g1[j] %= mod;</span><br><span class="line">      g2[j] %= mod;</span><br><span class="line">      <span class="keyword">if</span> (g1[j] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        g1[j] += mod;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (g2[j] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        g2[j] += mod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ll ans1 = <span class="number">0</span>;</span><br><span class="line">  ll ans2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (ll l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">    r = n / (n / l);</span><br><span class="line">    ll t1 = g1[id(r)] - g1[id(l - <span class="number">1</span>)];</span><br><span class="line">    ll t2 = g2[id(r)] - g2[id(l - <span class="number">1</span>)];</span><br><span class="line">    ans1 += (n / l) % mod * t1 % mod;</span><br><span class="line">    ans2 += (n / l) % mod * (n / l + <span class="number">1</span>) % mod * inv2 % mod * t2 % mod;</span><br><span class="line">    ans1 %= mod;</span><br><span class="line">    ans2 %= mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot &amp;&amp; prime[i] &lt;= sq; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (ll tmp = <span class="number">1l</span>l * prime[i] * prime[i]; tmp &lt;= n; tmp *= prime[i]) &#123;</span><br><span class="line">      ans1 += n / tmp;</span><br><span class="line">      ans1 %= mod;</span><br><span class="line">      ans2 += (n / tmp) % mod * (n / tmp + <span class="number">1</span>) % mod * tmp % mod * inv2 % mod;</span><br><span class="line">      ans2 %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ans1 = (n + <span class="number">1</span>) % mod * ans1 % mod;</span><br><span class="line">  <span class="keyword">if</span> (ans1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    ans1 += mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ans2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    ans2 += mod;</span><br><span class="line">  &#125;</span><br><span class="line">  ll ans = (ans1 - ans2 + mod) % mod;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> min25筛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西安邀请赛 B Product</title>
      <link href="2019/10/05/%E8%A5%BF%E5%AE%89%E9%82%80%E8%AF%B7%E8%B5%9B-B-Product/"/>
      <url>2019/10/05/%E8%A5%BF%E5%AE%89%E9%82%80%E8%AF%B7%E8%B5%9B-B-Product/</url>
      
        <content type="html"><![CDATA[<h3 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h3><p>You are given positive integers $n$ ( $n \le 10^9$), $m$ ( $m \le 2 \times 10^9$), $p$ ($p \le 2 \times 10^9$) and you need to calculate the following product modulo $p$.</p><script type="math/tex; mode=display">\displaystyle \displaystyle\prod_{i = 1}^n \displaystyle\prod_{j = 1}^n \displaystyle\prod_{k = 1}^n m^{\gcd(i,j)[k|\gcd(i,j)]}</script><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>Each test file contains a single test case. In each test file:</p><p>There are three positive integers $n$, $m$, $p$ which are separated by spaces. It is guaranteed that $p$ is a prime number.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>An integer representing your answer.</p><a id="more"></a><h3 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 2 1000000007</span><br></pre></td></tr></table></figure><h3 id="样例输出1"><a href="#样例输出1" class="headerlink" title="样例输出1"></a>样例输出1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">128</span><br></pre></td></tr></table></figure><h3 id="样例输入2"><a href="#样例输入2" class="headerlink" title="样例输入2"></a>样例输入2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">233 131072 4894651</span><br></pre></td></tr></table></figure><h3 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2"></a>样例输出2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">748517</span><br></pre></td></tr></table></figure><h3 id="样例输入3"><a href="#样例输入3" class="headerlink" title="样例输入3"></a>样例输入3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000000000 999999997 98765431</span><br></pre></td></tr></table></figure><h3 id="样例输出3"><a href="#样例输出3" class="headerlink" title="样例输出3"></a>样例输出3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">50078216</span><br></pre></td></tr></table></figure><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>请看题目描述</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>对原式进行化简：</p><script type="math/tex; mode=display">\begin{align}&\displaystyle \displaystyle\prod_{i = 1}^n \displaystyle\prod_{j = 1}^n \displaystyle\prod_{k = 1}^n m^{\gcd(i,j)[k|\gcd(i,j)]}\\&= m^{\displaystyle\sum_{i=1}^{n}\sum_{j=1}^{n}\sum_{k=1}^{n}\gcd(i,j)[k|\gcd(i,j)]}\\\end{align}</script><p>先考虑指数部分：</p><script type="math/tex; mode=display">\begin{align}&\sum_{i=1}^{n}\sum_{j=1}^{n}\sum_{k=1}^{n}\gcd(i,j)[k|\gcd(i,j)]\\&=\sum_{i=1}^{n}\sum_{j=1}^{n}d(\gcd(i,j))\gcd(i,j)  \tag {d(i) 表示 i 的约数个数}\\&=\sum_{k=1}^{n}\sum_{i=1}^{n}\sum_{j=1}^{n}k\cdot d(k)\cdot[\gcd(i,j)=k]    \tag{枚举gcd}\\&=\sum_{k=1}^{n}k\cdot d(k)\sum_{i=1}^{n}\sum_{j=1}^{n}[\gcd(i,j)=k]    \tag{转化为求gcd=k的数对的个数}\\&=\sum_{k=1}^{n}k\cdot d(k)\sum_{i=1}^{\lfloor\frac{n}{k}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{k}\rfloor}[\gcd(i,j)=1]    \tag{转化为求gcd=1的数对得个数}\\&=\sum_{k=1}^{n}k\cdot d(k)\cdot(2\sum_{i=1}^{\lfloor\frac{n}{k}\rfloor}\phi(i) - 1)    \tag{后面这个式子由欧拉函数是显然得出的}\end{align}</script><p>首先考虑后面一部分，可以用杜教筛求出其前缀和，回顾一下杜教筛的推导过程：</p><script type="math/tex; mode=display">\begin{align}&S(n)=\sum_{i=1}^{n}f(i)    \tag{要求的前缀和}\\&h(n)=f*g=\sum_{i|n}g(i)f(\frac{n}{i})    \tag{*为狄利克雷卷积}\\\\\\\\&\sum_{i=1}^{n}h(i)\\&=\sum_{i=1}^{n}\sum_{d|i}g(d)f(\frac{i}{d})\\&=\sum_{d=1}^{n}\sum_{d|i}g(d)f(\frac{i}{d})    \tag{枚举约数}\\&=\sum_{d=1}^{n}\sum_{k=1}^{\lfloor\frac{n}{d}\rfloor}g(d)f(k)\\&=\sum_{d=1}^{n}g(d)\sum_{k=1}^{\lfloor\frac{n}{d}\rfloor}f(k)    \tag{是不是发现惊喜了?}\\&=g(1)\cdot S(n) + \sum_{d=2}^{n}g(d)\sum_{k=1}^{\lfloor\frac{n}{d}\rfloor}f(k)    \tag{把d=1的情况拆出来}\\&=g(1)\cdot S(n) + \sum_{d=2}^{n}g(d)\cdot S(\lfloor\frac{n}{d}\rfloor)\\\\\\&\therefore g(1)\cdot S(n) = \sum_{i=1}^{n}h(i) - \sum_{d=2}^{n}g(d)\cdot S(\lfloor\frac{n}{d}\rfloor)\end{align}</script><p>其中 $g(n)$ 是需要我们自己构造的函数。</p><p>用杜教筛求 $\phi(n)$ 的前缀和时，我们令 $g(n) = I(n)$ ，则 $h(n) = id(n)$ ，所以有：</p><script type="math/tex; mode=display">S(n) =\frac{n(n + 1)}{2} - \sum_{d=2}^{n}S(\lfloor\frac{n}{d}\rfloor)</script><p>后面一部分可以用杜教筛分块了，那前面一部分的前缀和呢？</p><p>推导如下：</p><script type="math/tex; mode=display">\begin{align}&\sum_{i=1}^{n}i\cdot d(i)\\&=\sum_{i=1}^{n}i\sum_{j|i}1\\&=\sum_{i=1}^{n}\sum_{j|i}i\\&=\sum_{j=1}^{n}\sum_{j|i}i    \tag{枚举约数}\\&=\sum_{j=1}^{n}j\sum_{i=1}^{\lfloor \frac{n}{j}\rfloor}i    \tag{把 j 提出来}\\&=\sum_{j=1}^{n}\frac{j\lfloor \frac{n}{j}\rfloor(\lfloor \frac{n}{j}\rfloor+1)}{2}\\&=\sum_{i=1}^{n}\frac{i\lfloor \frac{n}{i}\rfloor(\lfloor \frac{n}{i}\rfloor+1)}{2}    \tag{j 看着不舒服!!} \\\end{align}</script><p>之后，这一部分也可以分块解决了，至此，此题公式推导完毕。</p><p>但是还没有结束，因为我们只是处理了指数部分，实际要求的是一个乘方。很明显感觉到，这个指数是会爆 long long 的，那么就要考虑欧拉降幂，题目也明说了答案对 $p$ 取模，且 $p$ 是一个质数，所以必有 $\gcd(m,p)=1$ ，那么结合欧拉降幂的公式，可得：</p><script type="math/tex; mode=display">m^{q} = m^{q\ \%\ \phi(p)} = m^{q\ \%\ (p-1)}</script><p>所以在公式中分块求和的时候记得对 $p - 1$ 取模，最后再跑一个快速幂就好了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>注意要把 $k\cdot d(k)$ 也筛出来一部分，不然会 T。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ll mod;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> prime[maxn];</span><br><span class="line">ll phi[maxn];</span><br><span class="line">ll d[maxn];</span><br><span class="line"><span class="keyword">int</span> low[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, ll&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eular</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  vis[<span class="number">0</span>] = vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">  phi[<span class="number">1</span>] = d[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">      prime[tot++] = i;</span><br><span class="line">      phi[i] = i - <span class="number">1</span>;</span><br><span class="line">      d[i] = <span class="number">2</span>;</span><br><span class="line">      low[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot &amp;&amp; i * prime[j] &lt; maxn; j++) &#123;</span><br><span class="line">      vis[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (i % prime[j]) &#123;</span><br><span class="line">        phi[i * prime[j]] = phi[i] * (prime[j] - <span class="number">1</span>);</span><br><span class="line">        d[i * prime[j]] = d[i] * <span class="number">2</span>;</span><br><span class="line">        low[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line">        d[i * prime[j]] = d[i] / (low[i] + <span class="number">1</span>) * (low[i] + <span class="number">2</span>);</span><br><span class="line">        low[i * prime[j]] = low[i] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">    phi[i] = (phi[i - <span class="number">1</span>] + phi[i]) % mod;</span><br><span class="line">    d[i] = (i * d[i] + d[i - <span class="number">1</span>]) % mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; maxn) &#123;</span><br><span class="line">    <span class="keyword">return</span> d[x];</span><br><span class="line">  &#125;</span><br><span class="line">  ll ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= x; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">    r = x / (x / l);</span><br><span class="line">    ll t1 = (<span class="number">1l</span>l * (l + r) * (r - l + <span class="number">1</span>) / <span class="number">2</span>) % mod;</span><br><span class="line">    ll t2 = (<span class="number">1l</span>l * (x / l) * (x / l + <span class="number">1</span>) / <span class="number">2</span>) % mod;</span><br><span class="line">    ans = (ans + t1 * t2) % mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">djs_phi</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; maxn) &#123;</span><br><span class="line">    <span class="keyword">return</span> phi[x];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (mp.count(x)) &#123;</span><br><span class="line">    <span class="keyword">return</span> mp[x];</span><br><span class="line">  &#125;</span><br><span class="line">  ll ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>, r; l &lt;= x; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">    r = x / (x / l);</span><br><span class="line">    ans += (r - l + <span class="number">1</span>) * djs_phi(x / l) % mod;</span><br><span class="line">    ans %= mod;</span><br><span class="line">  &#125;</span><br><span class="line">  ll tmp = (<span class="number">1l</span>l * x * (x + <span class="number">1</span>) / <span class="number">2</span>) % mod;</span><br><span class="line">  ans = (tmp - ans + mod) % mod;</span><br><span class="line">  <span class="keyword">return</span> mp[x] = ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">quick_mod</span><span class="params">(ll a, ll b, ll c)</span> </span>&#123;</span><br><span class="line">  a %= c;</span><br><span class="line">  ll ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      ans = ans * a % c;</span><br><span class="line">    &#125;</span><br><span class="line">    a = a * a % c;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m, p;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;p);</span><br><span class="line">  mod = p - <span class="number">1</span>;</span><br><span class="line">  eular();</span><br><span class="line">  ll sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">    r = n / (n / l);</span><br><span class="line">    ll t1 = get_sum(r) - get_sum(l - <span class="number">1</span>);</span><br><span class="line">    t1 = (t1 + mod) % mod;</span><br><span class="line">    ll t2 = <span class="number">2</span> * djs_phi(n / l) - <span class="number">1</span>;</span><br><span class="line">    sum = (sum + t1 * t2) % mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, quick_mod(m, sum, p));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 杜教筛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bzoj 2820</title>
      <link href="2019/09/30/bzoj-2820/"/>
      <url>2019/09/30/bzoj-2820/</url>
      
        <content type="html"><![CDATA[<h3 id="YY的GCD"><a href="#YY的GCD" class="headerlink" title="YY的GCD"></a>YY的GCD</h3><p>友情链接：</p><p> <a href="https://vjudge.net/problem/37167/origin">HYSBZ - 2820 </a></p><p><a href="https://www.luogu.org/problem/P2257">洛谷 P2257</a></p><p>神犇YY虐完数论后给傻×kAc出了一题</p><p>给定$N$, $M$,求 $1\le x\le N$, $1\le y\le M$ 且 $\gcd(x, y)$ 为质数的 $(x, y)$ 有多少对</p><p>kAc这种傻×必然不会了，于是向你来请教……</p><p>多组输入</p><a id="more"></a><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行一个整数 $T$ 表述数据组数</p><p>接下来 $T$ 行，每行两个正整数，表示 $N$, $M$</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>T行，每行一个整数表示第i组数据的结果</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">210 10100 100</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">302791</span><br></pre></td></tr></table></figure><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>$T = 10000$</p><p>$N, M\le 10000000$</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $N, M$，求 <script type="math/tex">\sum_{i=1}^{N}\sum_{j=1}^{M}isprime(\gcd(i, j))</script> 的值，即 <script type="math/tex">[1, M]</script> 和 <script type="math/tex">[1, N]</script> 两个区间中各取一个数，形成一个数对，且 <script type="math/tex">\gcd(i,j)</script> 为质数，问这样的数对有多少个。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>考虑枚举质数 $d$ ，则原式为：</p><script type="math/tex; mode=display">\sum_{i=1}^{N}\sum_{j=1}^{M}isprime(\gcd(i, j))\\= \sum_{d=1}^{\min(N,M)}is(d)\sum_{i=1}^{N}\sum_{j=1}^{M}[\gcd(i,j)=d]\\</script><p>后面两个 $\sum$ 为：</p><script type="math/tex; mode=display">\begin{aligned}&\sum_{i=1}^{N}\sum_{j=1}^{M}[\gcd(i,j)=d]\\&= \sum_{i=1}^{\lfloor \frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}[\gcd(i, j)=1]\\&= \sum_{i=1}^{\lfloor \frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}\sum_{k|\gcd(i,j)}\mu(k)\\&= \sum_{i=1}^{\lfloor \frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}\sum_{k|i,k|j}\mu(k)\\&= \sum_{k=1}^{\min(\lfloor \frac{N}{d}\rfloor,\lfloor \frac{M}{d}\rfloor)}\sum_{i=1,k|i}^{\lfloor \frac{N}{d}\rfloor} \ \sum_{j=1,k|j}^{\lfloor\frac{M}{d}\rfloor}\mu(k)\\&= \sum_{k=1}^{\min(\lfloor \frac{N}{d}\rfloor,\lfloor \frac{M}{d}\rfloor)}\mu(k)\sum_{i=1,k|i}^{\lfloor \frac{N}{d}\rfloor} \ \sum_{j=1,k|j}^{\lfloor\frac{M}{d}\rfloor}1\\&= \sum_{k=1}^{\min(\lfloor \frac{N}{d}\rfloor,\lfloor \frac{M}{d}\rfloor)}\mu(k)\lfloor\frac{N}{kd}\rfloor\lfloor\frac{M}{kd}\rfloor\end{aligned}</script><p>$\therefore $ 原式为：</p><script type="math/tex; mode=display">\begin{align}&\sum_{d=1}^{\min(N,M)}is(d)\sum_{i=1}^{N}\sum_{j=1}^{M}[\gcd(i,j)=d]\\&= \sum_{d=1}^{\min(N,M)}is(d)\sum_{k=1}^{\min(\lfloor \frac{N}{d}\rfloor,\lfloor \frac{M}{d}\rfloor)}\mu(k)\lfloor\frac{N}{kd}\rfloor\lfloor\frac{M}{kd}\rfloor\\\end{align}</script><p>令 $T = kd$ ，则有：</p><script type="math/tex; mode=display">\begin{align}&\sum_{d=1}^{\min(N,M)}is(d)\sum_{k=1}^{\min(\lfloor \frac{N}{d}\rfloor,\lfloor \frac{M}{d}\rfloor)}\mu(k)\lfloor\frac{N}{kd}\rfloor\lfloor\frac{M}{kd}\rfloor\\&= \sum_{d=1}^{\min(N,M)}is(d)\sum_{d|T}\mu(\frac{T}{d})\lfloor\frac{N}{T}\rfloor\lfloor\frac{M}{T}\rfloor\\&= \sum_{T=1}^{\min(N,M)}\sum_{d|T,is(d)}\mu(\frac{T}{d})\lfloor\frac{N}{T}\rfloor\lfloor\frac{M}{T}\rfloor\\&= \sum_{T=1}^{\min(N,M)}\lfloor\frac{N}{T}\rfloor\lfloor\frac{M}{T}\rfloor\sum_{d|T,is(d)}\mu(\frac{T}{d})\end{align}</script><p>到这里来式子就比较明了了，$\lfloor\dfrac{N}{T}\rfloor\lfloor\dfrac{M}{T}\rfloor$ 是很明显的分块，可以办到 $O(\sqrt{n})$ 的复杂度，后面那一部分如何处理？</p><p>可以考虑枚举质数进行打表，$n$ 范围内的质数有 $\dfrac{n}{\ln n}$ 个，而用每一个质数去筛，均摊到每一个质数的复杂度为 $O(\ln n)$ ，所以线性筛出所有质数，然后用这些质数再去筛的复杂度为 $O(n)$ ，总的时间复杂度为 $O(\sqrt{n})$ </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> prime[maxn];</span><br><span class="line"><span class="keyword">int</span> mu[maxn];</span><br><span class="line">ll f[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eular</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  vis[<span class="number">0</span>] = vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">  mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">      prime[tot++] = i;</span><br><span class="line">      mu[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot &amp;&amp; i * prime[j] &lt; maxn; j++) &#123;</span><br><span class="line">      vis[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">      mu[i * prime[j]] = -mu[i];</span><br><span class="line">      <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) &#123;</span><br><span class="line">        mu[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = prime[i]; j &lt; maxn; j += prime[i]) &#123;</span><br><span class="line">      f[j] += mu[j / prime[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">    f[i] += f[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  eular();</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> tmp = min(n, m);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= tmp; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">      r = min(n / (n / l), m / (m / l));</span><br><span class="line">      ans += (f[r] - f[l - <span class="number">1</span>]) * (n / l) * (m / l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚刚开始写这种题还是要好好的把公式推一遍的。</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>叹息</title>
      <link href="2019/09/18/%E5%8F%B9%E6%81%AF/"/>
      <url>2019/09/18/%E5%8F%B9%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>从大一下学期开始打ACM，到现在大三上，将近两年了，期间队友换了无数个，CZY，XXW，LJX，HSC，LSP，WGL，LZX。陪我打的最久的一个队友是WGL。最开始和两个高一级的学长一起打比赛，无论是省赛还是校赛都打成了辣鸡，打完之后这个队伍就完蛋了，XXW要出国了，CZY也不怎么想打了。然后老师给我找了个新队友WGL，据WGL自己说是选了老师的ACM通选课，比较感兴趣，老师就让他跟着一起训练。WGL大一下开始和我一起打比赛，当时我们两个都是菜鸡，市赛未报名，打星队，当时缺队友，我们俩个人打的还不错，当时挺开心的（现在回想也是啊）。没过多久，LJX过来和我们组队，练了不久，HSC也过来了（变成了 4 个人的队伍？），没打多久HSC不打了，稍微稳定下来，我，WGL，LJX三人组队。</p><p>大一暑假，三个菜鸡暑期集训，还是那样，很菜，但是心里没有b数，写了几个水题就沾沾自喜。</p><p>大二上，当时状态非常差，无论是比赛还是学业，都搞得一塌糊涂，浑浑噩噩的就过去了，题目没怎么刷，绩点也降了几个名次，具体降了多少没问，怕受不了，但估计降到专业7、8左右。寒假训练之后，LJX出国了，队伍又剩下我们俩，然后学长LSP和我们组队。</p><p>大二下，开始好好训练刷题（至少比以前认真），有了点进步，但是省赛前，又换队友了，LSP调到另一个队伍，LZX调过来。这个学期痛定思痛，不再浑浑噩噩了，绩点回升，比赛也打出了点成绩。</p><p>大三上，现在，区域赛前 1 个月，WGL调走了，XSJ调过来，我主动和老师提出的，因为队伍里，他比起我和LZX弱了一些，然后有一些事我也不想说。刚刚碰到老师，她说她早上把WGL叫到办公室，和WGL说了这个事情，WGL说自己十一要回家（这个我是知道的，他和我说过），不会参加训练，就当个替补就好了。</p><p>刚刚这个家伙还QQ问我，老师有没有和我说组队的事，我当然知道啊。。。因为这就是我提出的。。。这家伙还说让我们好好加油区域赛拿个金。。。。</p><p>有点苦涩与感慨。</p><p>就这样，等下还有计算机网络的作业要写，呵呵。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UVA 11426</title>
      <link href="2019/09/08/UVA-11426/"/>
      <url>2019/09/08/UVA-11426/</url>
      
        <content type="html"><![CDATA[<h3 id="GCD-Extreme-II"><a href="#GCD-Extreme-II" class="headerlink" title="GCD - Extreme (II)"></a>GCD - Extreme (II)</h3><p> <a href="https://vjudge.net/problem/18553">UVA - 11426 </a></p><p>Given the value of $N$, you will have to find the value of $G$. The definition of $G$ is given below:</p><script type="math/tex; mode=display">G = \sum_{i=1}^{i<N}\sum_{j=i+1}^{j\le N}\gcd(i,j)</script><p>Here $\gcd(i,j)$ means the greatest common divisor of integer $i$ and integer $j$.</p><p>For those who have trouble understanding summation notation, the meaning of $G$ is given in the following code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">G=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=N;j++)</span><br><span class="line">&#123;</span><br><span class="line">    G+=gcd(i,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Here gcd() is a function that finds the greatest common divisor of the two input numbers*/</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The input file contains at most $100$ lines of inputs. Each line contains an integer $N$ ($1&lt;N&lt;4000001$). The meaning of $N$ is given in the problem statement. Input is terminated by a line containing a single zero.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each line of input produce one line of output. This line contains the value of $G$ for the corresponding $N$. The value of $G$ will fit in a 64-bit signed integer.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">100</span><br><span class="line">200000</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">67</span><br><span class="line">13015</span><br><span class="line">143295493160</span><br></pre></td></tr></table></figure><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个 $N$，让你计算题面中式子的值。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>此题乍一看，首先就是想到一个 $O(n^2\log n)$ 的暴力算法，显然不行。我们想想在 $4e6$ 的范围内，两个不同的数的 $\gcd$ 也是在 $4e6$ 范围内的，那能不能通过枚举 $\gcd$ 来计算？</p><p>考虑一个数 $n$ ，$n$ 的一个因子 $k$ ，那么，小于 $n$ 且与 $n$ 的 $gcd$ 为 $k$ 的数有多少个？我们设其中一个数为 $a$，则显然有 $\gcd(a/k, n/k) = 1$ ，为啥？</p><p>假设 $\gcd(a/k, n/k)=g,$ ，又 $gcd(n, n/k) = n/k$，所以</p><p>$gcd(a, n) = gcd(k\times a/k,k\times n/k)=k\times \gcd(a/k, n/k) = k\times g$，若要 $\gcd(a,n)=k$，则必有 $g=1$，即 $n/k$ 与 $a/k$ 互质，因为 $a &lt; n$，所以 $a/k &lt; n/k$，所以 $a$ 的数量就是 $[1, n/ k)$ 内与 $n/k$ 互质的数的数量。</p><p>结论，在$[1,n)$ 的范围内，与 $n$ 的 $\gcd$ 为 $k$ 的数共有 $\phi(n/k)$ 个， $\phi$ 为欧拉函数。</p><p>接下来就是枚举 $k$ ，用 $n\ln n$ 的筛打表，最终时间复杂度也是 $O(n\log n)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> prime[maxn];</span><br><span class="line"><span class="keyword">int</span> phi[maxn];</span><br><span class="line">ll sum[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eular</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">      prime[tot++] = i;</span><br><span class="line">      phi[i] = i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot &amp;&amp; i * prime[j] &lt; maxn; j++) &#123;</span><br><span class="line">      vis[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">      phi[i * prime[j]] = phi[i] * (prime[j] - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) &#123;</span><br><span class="line">        phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  eular();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; <span class="number">2</span> * i &lt; maxn; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * i; j &lt; maxn; j += i) &#123;</span><br><span class="line">      sum[j] += i * phi[j / i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">    sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum[n]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>徐州网络赛 I</title>
      <link href="2019/09/07/%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B-I/"/>
      <url>2019/09/07/%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B-I/</url>
      
        <content type="html"><![CDATA[<blockquote><p>时间限制：$2000ms$</p><p>空间限制：$256MB$</p></blockquote><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><p>Given a permutation $p$ of length $n$, you are asked to answer $m$ queries, each query can be represented as a pair ($l,\ r$), you need to find the number of pair($i,\ j$) such that $l\le i &lt; j\le r$ and $\min(p_i, p_j)=gcd(p_i, p_j)$.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>There is two integers $n$($1\le n\le 10^5$), $m$($1\le m\le 10^5$) in the first line, denoting the length of $p$ and the number of queries.</p><p>In the second line, there is a permutation of length $n$, denoting the given permutation $p$. It is guaranteed that $p$ is a permutation of length $n$.</p><p>For the next $m$ lines, each line contains two integer $l_i$ and $r_i$($1 \le l_i \le r_i \le n$), denoting each query.</p><a id="more"></a><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each query, print a single line containing only one integer which denotes the number of pair($i,\ j$).</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">1 2 3</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个 $n$ 的全排列，接下来有 $m$ 个查询，查询的是某个区间内有多少个数对($p_i,\ p_j$)($i&lt;j$)，这些数对满足条件 $gcd(p_i, p_j) = \min(p_i, p_j)$， 也就是这两个数之间存在倍数关系。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>唉，比赛的时候一直认为这是个纯粹的数论题，没往数据结构上想……</p><p>这题有个非常重要的条件，就是这个数组是 $n$ 的全排列！这样你才能够在 $O(nlogn)$ 的时间复杂度内把所有的数对全部筛选出来。</p><p>首先，我们先把所有的数对筛选出来，注意是坐标($i, j$)，例如数组 $1,2,3,4,5$ ，先筛 $1$ 的，满足条件的数对是 ($1,2$)($1,3$)($1,4$)($1,5$)，注意，数对里的数是这些数的坐标，而不是数本身。之后，把 $2,3,4,5$ 放到编号为 $1$ 的 $vector$ 里面，然后以此类推，把每个数往后的满足条件的数对都求出来并放进对应的 $vector$ 里面。可以先看一下这部分代码，这个时间复杂度是：</p><script type="math/tex; mode=display">n\times(\frac11+\frac12+\frac13+...+\frac1n) = n\ln n</script><p>括号项是调和级数，和为 $\ln n$ 。</p><p>接下来有两种做法，一种是主席树在线查询，一种是线段树离线查询，思路是一样的，这里只讲前一种做法（没学过主席树的话建议学一下）。</p><p>首先考虑主席树存储什么，题目求满足条件的数对的数量，考虑存储区间和，那么这个和是什么呢？这得先清楚这棵主席树的建树过程。我们顺序扫描，每扫描一个点，就把它对应的 $vector$ 里面的所有下标，去主席树更新一下，准确的讲是这一点的值要 +1，现在明白主席树存储什么了吧？对于叶子节点，就是这个下标所处的点，能够满足条件的数对的数量。这里之所以要用主席树，就是因为它满足前缀和的性质，查询 ($l, r$) 可以用区间 ($1, r$) - ($1, l-1$) 。</p><p>这题有个坑爹的地方，由于共有 $n\ln n$ 个数对，每个点不止更新一次，而是要把它对应的 $vector$ 里面的所有点都更新一下，所以空间复杂度不是常规主席树的 $O(n\log n)$ ，而是 $O(n\log^2n)$ ，空间上卡的很紧…… ，总共就给了 $256MB$ 的空间，博主用了 $250MB$ ……</p><p><img src="/2019/09/07/%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B-I/1.png" alt="1"></p><p>下面上代码</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> lch, rch, sum;</span><br><span class="line">&#125; tree[maxn * <span class="number">210</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="keyword">int</span> root[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt)</span> </span>&#123;</span><br><span class="line">  rt = tot++;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  build(l, m, tree[rt].lch);</span><br><span class="line">  build(m + <span class="number">1</span>, r, tree[rt].rch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt, <span class="keyword">int</span> pre, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">  rt = tot++;</span><br><span class="line">  tree[rt] = tree[pre];</span><br><span class="line">  tree[rt].sum++;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (c &lt;= m) &#123;</span><br><span class="line">    update(l, m, tree[rt].lch, tree[pre].lch, c);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    update(m + <span class="number">1</span>, r, tree[rt].rch, tree[pre].rch, c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> tl, <span class="keyword">int</span> tr, <span class="keyword">int</span> rt, <span class="keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= tl &amp;&amp; r &gt;= tr) &#123;</span><br><span class="line">    <span class="keyword">return</span> tree[rt].sum - tree[pre].sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> tm = (tl + tr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= tm) &#123;</span><br><span class="line">    tmp += query(l, r, tl, tm, tree[rt].lch, tree[pre].lch);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (r &gt; tm) &#123;</span><br><span class="line">    tmp += query(l, r, tm + <span class="number">1</span>, tr, tree[rt].rch, tree[pre].rch);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    p[a[i]] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * a[i]; j &lt;= n; j += a[i]) &#123;</span><br><span class="line">      vt[i].push_back(p[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  build(<span class="number">1</span>, n, root[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    root[i] = root[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vt[i].size(); j++) &#123;</span><br><span class="line">      update(<span class="number">1</span>, n, root[i], root[i], vt[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, query(l, r, <span class="number">1</span>, n, root[r], root[l - <span class="number">1</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3834 区间第 K 大</title>
      <link href="2019/09/03/P3834-%E5%8C%BA%E9%97%B4%E7%AC%AC-K-%E5%A4%A7/"/>
      <url>2019/09/03/P3834-%E5%8C%BA%E9%97%B4%E7%AC%AC-K-%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>这是个非常经典的主席树入门题——静态区间第K小</p><p><strong>数据已经过加强，请使用主席树。同时请注意常数优化</strong></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>如题，给定N个整数构成的序列，将对于指定的闭区间查询其区间内的第K小值。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含两个正整数 $N,M$，分别表示序列的长度和查询的个数。</p><p>第二行包含 $N$ 个整数，表示这个序列各项的数字。</p><p>接下来 $M$ 行每行包含三个整数 $l,\ r,\ k,$ 表示查询区间[$l,\ r$]内的第 $k$ 小值。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出包含 $k$ 行，每行 $1$ 个整数，依次表示每一次查询的结果</p><a id="more"></a><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入 #1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">25957 6405 15770 26287 26465 </span><br><span class="line">2 2 1</span><br><span class="line">3 4 1</span><br><span class="line">4 5 1</span><br><span class="line">1 2 2</span><br><span class="line">4 4 1</span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6405</span><br><span class="line">15770</span><br><span class="line">26287</span><br><span class="line">25957</span><br><span class="line">26287</span><br></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h3><p><strong>数据范围</strong>：</p><p>对于20%的数据满足：$1 \leq N, M \leq 10$</p><p>对于50%的数据满足：$1 \leq N, M \leq 10^3$</p><p>对于80%的数据满足：$1 \leq N, M \leq 10^5$</p><p>对于100%的数据满足：$1 \leq N, M \leq 2\cdot 10^5$</p><p>对于数列中的所有数 $a_i$ ，均满足c$-10^9 \leq a_i \leq 10^9$</p><p><strong>样例数据说明</strong>：</p><p>$N=5$，数列长度为 $5$，数列从第一项开始依次为[$25957,6405,15770,26287,26465$]</p><p>第一次查询为[$2, 2$]区间内的第一小值，即为 $6405$</p><p>第二次查询为[$3, 4$]区间内的第一小值，即为 $15770$</p><p>第三次查询为[$4, 5$]区间内的第一小值，即为 $26287$</p><p>第四次查询为[$1, 2$]区间内的第二小值，即为 $25957$</p><p>第五次查询为[$4, 4$]区间内的第一小值，即为 $26287$</p><h3 id="题意、解决方案"><a href="#题意、解决方案" class="headerlink" title="题意、解决方案"></a>题意、解决方案</h3><p>模板题，存个板子</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zpw                    \</span></span><br><span class="line">  ios::sync_with_stdio(<span class="literal">false</span>); \</span><br><span class="line">  <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);               \</span><br><span class="line">  <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> lch, rch, sum;</span><br><span class="line">&#125; tree[maxn * <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="keyword">int</span> root[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* [l ,r] 当前区间, rt 当前树节点编号 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt)</span> </span>&#123;</span><br><span class="line">  rt = tot++;</span><br><span class="line">  tree[rt].sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  build(l, m, tree[rt].lch);</span><br><span class="line">  build(m + <span class="number">1</span>, r, tree[rt].rch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* [l, r] 当前区间, rt 当前树节点编号, pre 前一棵线段树的当前节点, c 更新的点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt, <span class="keyword">int</span> pre, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">  rt = tot++;</span><br><span class="line">  tree[rt] = tree[pre];</span><br><span class="line">  tree[rt].sum += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (c &lt;= m) &#123;</span><br><span class="line">    update(l, m, tree[rt].lch, tree[pre].lch, c);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    update(m + <span class="number">1</span>, r, tree[rt].rch, tree[pre].rch, c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* [l, r] 当前区间, rt 当前树节点编号, pre 前一棵线段树的当前节点, 第 k 小 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt, <span class="keyword">int</span> pre, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> lnum = tree[tree[rt].lch].sum - tree[tree[pre].lch].sum;</span><br><span class="line">  <span class="keyword">if</span> (lnum &gt;= k) &#123;</span><br><span class="line">    <span class="keyword">return</span> query(l, m, tree[rt].lch, tree[pre].lch, k);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> query(m + <span class="number">1</span>, r, tree[rt].rch, tree[pre].rch, k - lnum);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    b[i] = a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 离散化 */</span></span><br><span class="line">  sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> num = unique(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">  build(<span class="number">1</span>, num, root[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> p = lower_bound(b + <span class="number">1</span>, b + num + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    update(<span class="number">1</span>, num, root[i], root[i - <span class="number">1</span>], p);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    <span class="keyword">int</span> l, r, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">    <span class="keyword">int</span> p = query(<span class="number">1</span>, num, root[r], root[l - <span class="number">1</span>], k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b[p]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南京网络赛 A</title>
      <link href="2019/09/02/%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B-A/"/>
      <url>2019/09/02/%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B-A/</url>
      
        <content type="html"><![CDATA[<ul><li>1500ms</li><li>524288K</li></ul><h3 id="The-beautiful-values-of-the-palace"><a href="#The-beautiful-values-of-the-palace" class="headerlink" title="The beautiful values of the palace"></a>The beautiful values of the palace</h3><p>Here is a square matrix of $n\times n$, each lattice has its value ($n$ must be odd), and the center value is $n\times n$ . Its spiral decline along the center of the square matrix (the way of spiral decline is shown in the following figure:)</p><p><img src="https://res.jisuanke.com/img/upload/20190826/3b1ac98800e8ff9958638769f0ea80956b2c552f.png" alt="img"></p><p><img src="https://res.jisuanke.com/img/upload/20190826/e188ba2f470e2afbf1d21ac4d1887e2f225dd40b.png" alt="img"></p><a id="more"></a><p><strong>The grid in the lower left corner is (1,1) and the grid in the upper right corner is (n , n)</strong></p><p>Now I can choose $m$ squares to build palaces, The beauty of each palace is equal to the digital sum of the value of the land which it is located. Such as (the land value is $123213$,the beautiful values of the palace located on it is $1+2+3+2+1+3=12$) ($666$ -&gt; $18$) ($456$ -&gt;$15$)</p><p>Next, we ask $p$ times to the sum of the beautiful values of the palace in the matrix where the lower left grid($x_1,y_1$), the upper right square ($x_2,y_2$).</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line has only one number $T$ .Representing $T$-group of test data ($T\le 5$)</p><p>The next line is three number: $n\ m\ p$</p><p>The $m$ lines follow, each line contains two integers the square of the palace ($x, y$)</p><p>The $p$ lines follow, each line contains four integers : the lower left grid ($x_1,y_1$) the upper right square ($x_2,y_2$)</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Next, $p_1+p_2…+p_T$ lines: Represent the answer in turn($n \le 10^6$)($m , p \le 10^5$)</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3 4 4</span><br><span class="line">1 1</span><br><span class="line">2 2</span><br><span class="line">3 3</span><br><span class="line">2 3</span><br><span class="line">1 1 1 1</span><br><span class="line">2 2 3 3</span><br><span class="line">1 1 3 3</span><br><span class="line">1 2 2 3</span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">18</span><br><span class="line">23</span><br><span class="line">17</span><br></pre></td></tr></table></figure><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$n\times n$ 的矩阵，构造方法：从右上角顺时针旋转形成。然后给出 $m$ 个点，只有这 $m$ 个点的值有效，别的全部变为 $0$，然后有 $q$ 个查询，每次查询一个区域，求这个区域内的格子的权值和，一个格子的权值定义为这个格子数值的数位和。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>考虑用线段树离线处理（其实用主席树在线处理可能更好）。</p><p>按照 $x$ 轴去建立一棵线段树，线段树存的值是 $x$ 坐标在某一区间内的点的权值之和。我们先把所有的点，即包括有效点和查询点共 $m + 2q$ 个点，放在一个数组里，然后按照 $y$ 轴从小到大排序， $y$ 相同则按 $tag$ 排序。注意，点存入该数组时要加标记，要出入的点（即那 $m$ 个）$tag$ 为 $1$，查询的左下角的点 $tag$ 为 $0$，查询的右上角的点 $tag$ 为 $2$ ，为什么要这么标记呢？下面解释。</p><p>首先，我们顺序扫描这个数组</p><ul><li>碰到 $tag$ 为 $1$ 的点，则插入线段树。</li><li>$tag$ 为 $0$ 的点，则说明它是某一个查询的左下角的点，此时需要查询一次他和其对应的右上角点所夹的 $x$ 轴区间的值，存到ans数组里去，即 $ans[p[i].id] = query(l_1, l_2)$，$l_1$ 是当前点的 $x$ 坐标，$l_2$ 是其对应右上角点的 $x$ 坐标。</li><li>$tag$ 为 2 的点，则说明它是某个查询的右上角的点，此时也要进行一次查询，查询的区间同上，此时更新答案 $ans[p[i].id] = query(l_1, l_2) - ans[p[i].id]$ </li></ul><p><img src="/2019/09/02/%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B-A/1.jpg" alt></p><p>用这幅图来说明就是，用大的矩形减去那个小的矩形，即为答案。那为什么之前的 $tag$ 要那么安排呢？这里有一个细节要注意，我们减的时候，不能把左下角那个点所在的那一行也给减掉啊，所以在排序时，<strong>当 $y$ 相同时</strong>，左下角的点必须排在要插入的点之前，同理，右上角的点必须排在要插入的点之后。</p><p>至于如何 $O(1)$ 获取构造的矩阵中某个点的值，有公式，网上也有资料，大家可以自己推一下。</p><p>类似的思路，用主席树也可以很快的写出来。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x, y, x1;</span><br><span class="line">  <span class="keyword">int</span> id, tag;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp; t) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (y == t.y) &#123;</span><br><span class="line">      <span class="keyword">return</span> tag &lt; t.tag;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> y &lt; t.y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; p[maxn];</span><br><span class="line"></span><br><span class="line">ll tree[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">ll ans[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt, <span class="keyword">int</span> c, ll val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    tree[rt] += val;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (c &lt;= m) &#123;</span><br><span class="line">    update(l, m, rt &lt;&lt; <span class="number">1</span>, c, val);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    update(m + <span class="number">1</span>, r, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, c, val);</span><br><span class="line">  &#125;</span><br><span class="line">  tree[rt] = tree[rt &lt;&lt; <span class="number">1</span>] + tree[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> tl, <span class="keyword">int</span> tr, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= tl &amp;&amp; r &gt;= tr) &#123;</span><br><span class="line">    <span class="keyword">return</span> tree[rt];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> tm = (tl + tr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  ll tmp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= tm) &#123;</span><br><span class="line">    tmp += query(l, r, tl, tm, rt &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (r &gt; tm) &#123;</span><br><span class="line">    tmp += query(l, r, tm + <span class="number">1</span>, tr, rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ff</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">  x = n - x + <span class="number">1</span>;</span><br><span class="line">  y = n - y + <span class="number">1</span>;</span><br><span class="line">  ll r = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= y &amp; x + y &lt;= n + <span class="number">1</span>) &#123;</span><br><span class="line">    r = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * (r - <span class="number">1</span>) * n - <span class="number">4</span> * (r - <span class="number">1</span>) * (r - <span class="number">1</span>) + <span class="number">1</span> + y - r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= y &amp; x + y &gt;= n + <span class="number">1</span>) &#123;</span><br><span class="line">    r = n - y + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * (r - <span class="number">1</span>) * n - <span class="number">4</span> * (r - <span class="number">1</span>) * (r - <span class="number">1</span>) + <span class="number">1</span> + n - <span class="number">2</span> * r + <span class="number">1</span> + x - r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt;= y &amp; x + y &gt;= n + <span class="number">1</span>) &#123;</span><br><span class="line">    r = n - x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * (r - <span class="number">1</span>) * n - <span class="number">4</span> * (r - <span class="number">1</span>) * (r - <span class="number">1</span>) + <span class="number">1</span> + <span class="number">3</span> * n - <span class="number">6</span> * r + <span class="number">3</span> - y +</span><br><span class="line">           r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt;= y &amp; x + y &lt;= n + <span class="number">1</span>) &#123;</span><br><span class="line">    r = y;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * (r - <span class="number">1</span>) * n - <span class="number">4</span> * (r - <span class="number">1</span>) * (r - <span class="number">1</span>) + <span class="number">1</span> + <span class="number">4</span> * n - <span class="number">8</span> * r + <span class="number">4</span> - x +</span><br><span class="line">           r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">  ll ans = ff(x, y);</span><br><span class="line">  ll sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (ans) &#123;</span><br><span class="line">    sum += ans % <span class="number">10</span>;</span><br><span class="line">    ans /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span>(tree));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p[tot].x, &amp;p[tot].y);</span><br><span class="line">      p[tot++].tag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p[tot].x, &amp;p[tot].y);</span><br><span class="line">      p[tot].id = p[tot + <span class="number">1</span>].id = i;</span><br><span class="line">      p[tot++].tag = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p[tot].x, &amp;p[tot].y);</span><br><span class="line">      p[tot - <span class="number">1</span>].x1 = p[tot].x;</span><br><span class="line">      p[tot].x1 = p[tot - <span class="number">1</span>].x;</span><br><span class="line">      p[tot++].tag = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p, p + tot);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p[i].tag == <span class="number">1</span>) &#123;</span><br><span class="line">        update(<span class="number">1</span>, n, <span class="number">1</span>, p[i].x, f(p[i].x, p[i].y));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[i].tag == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> id = p[i].id;</span><br><span class="line">        ans[id] = query(p[i].x, p[i].x1, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> id = p[i].id;</span><br><span class="line">        ans[id] = query(p[i].x1, p[i].x, <span class="number">1</span>, n, <span class="number">1</span>) - ans[id];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>9.3更新</p><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><p>补上一个用主席树写的版本，在线查询，不用离线……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> lch, rch, sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> point&amp; t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> y &lt; t.y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node tree[maxn * <span class="number">40</span>];</span><br><span class="line">point p[maxn];</span><br><span class="line"><span class="keyword">int</span> root[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt)</span> </span>&#123;</span><br><span class="line">  rt = tot++;</span><br><span class="line">  tree[rt].sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  build(l, m, tree[rt].lch);</span><br><span class="line">  build(m + <span class="number">1</span>, r, tree[rt].rch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>&amp; rt, <span class="keyword">int</span> pre, <span class="keyword">int</span> c, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  rt = tot++;</span><br><span class="line">  tree[rt] = tree[pre];</span><br><span class="line">  tree[rt].sum += val;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (c &lt;= m) &#123;</span><br><span class="line">    update(l, m, tree[rt].lch, tree[pre].lch, c, val);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    update(m + <span class="number">1</span>, r, tree[rt].rch, tree[pre].rch, c, val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> tl, <span class="keyword">int</span> tr, <span class="keyword">int</span> rt, <span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= tl &amp;&amp; r &gt;= tr) &#123;</span><br><span class="line">    <span class="keyword">return</span> tree[rt].sum - tree[pre].sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> tm = (tl + tr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= tm) &#123;</span><br><span class="line">    sum += query(tl, tm, tree[rt].lch, tree[pre].lch, l, r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (r &gt; tm) &#123;</span><br><span class="line">    sum += query(tm + <span class="number">1</span>, tr, tree[rt].rch, tree[pre].rch, l, r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ff</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  x = n - x + <span class="number">1</span>;</span><br><span class="line">  y = n - y + <span class="number">1</span>;</span><br><span class="line">  ll r = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= y &amp; x + y &lt;= n + <span class="number">1</span>) &#123;</span><br><span class="line">    r = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * (r - <span class="number">1</span>) * n - <span class="number">4</span> * (r - <span class="number">1</span>) * (r - <span class="number">1</span>) + <span class="number">1</span> + y - r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= y &amp; x + y &gt;= n + <span class="number">1</span>) &#123;</span><br><span class="line">    r = n - y + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * (r - <span class="number">1</span>) * n - <span class="number">4</span> * (r - <span class="number">1</span>) * (r - <span class="number">1</span>) + <span class="number">1</span> + n - <span class="number">2</span> * r + <span class="number">1</span> + x - r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt;= y &amp; x + y &gt;= n + <span class="number">1</span>) &#123;</span><br><span class="line">    r = n - x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * (r - <span class="number">1</span>) * n - <span class="number">4</span> * (r - <span class="number">1</span>) * (r - <span class="number">1</span>) + <span class="number">1</span> + <span class="number">3</span> * n - <span class="number">6</span> * r + <span class="number">3</span> - y +</span><br><span class="line">           r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt;= y &amp; x + y &lt;= n + <span class="number">1</span>) &#123;</span><br><span class="line">    r = y;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * (r - <span class="number">1</span>) * n - <span class="number">4</span> * (r - <span class="number">1</span>) * (r - <span class="number">1</span>) + <span class="number">1</span> + <span class="number">4</span> * n - <span class="number">8</span> * r + <span class="number">4</span> - x +</span><br><span class="line">           r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  ll ans = ff(x, y);</span><br><span class="line">  ll sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (ans) &#123;</span><br><span class="line">    sum += ans % <span class="number">10</span>;</span><br><span class="line">    ans /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    <span class="keyword">int</span> m, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p + <span class="number">1</span>, p + m + <span class="number">1</span>);</span><br><span class="line">    build(<span class="number">1</span>, n, root[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      update(<span class="number">1</span>, n, root[i], root[i - <span class="number">1</span>], p[i].x, f(p[i].x, p[i].y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">      point p1, p2;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;p1.x, &amp;p1.y, &amp;p2.x, &amp;p2.y);</span><br><span class="line">      <span class="keyword">int</span> t1 = lower_bound(p + <span class="number">1</span>, p + m + <span class="number">1</span>, p1) - p - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span> t2 = upper_bound(p + <span class="number">1</span>, p + m + <span class="number">1</span>, p2) - p - <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, query(<span class="number">1</span>, n, root[t2], root[t1], p1.x, p2.x));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Isomorphic Inversion</title>
      <link href="2019/08/28/Isomorphic-Inversion/"/>
      <url>2019/08/28/Isomorphic-Inversion/</url>
      
        <content type="html"><![CDATA[<h3 id="Isomorphic-Inversion"><a href="#Isomorphic-Inversion" class="headerlink" title="Isomorphic Inversion"></a>Isomorphic Inversion</h3><p>Let $s$ be a given string of up to $10^6$ digits. Find the maximal $k$ for which it is possible to partition $s$ into $k$ consecutive contiguous substrings, such that the $k$ parts form a palindrome. More precisely, we say that strings <script type="math/tex">s_0,s_1,…,s_{k−1}</script> form a palindrome if <script type="math/tex">s_i=s_{k−1−i}</script> for all <script type="math/tex">0\le i< k</script>.</p><p>In the first sample case, we can split the string <code>652526</code> into $4$ parts as <code>6|52|52|6</code>, and these parts together form a palindrome. It turns out that it is impossible to split this input into more than $4$ parts while still making sure the parts form a palindrome.</p><a id="more"></a><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><ul><li>A nonempty string of up to $10^6$ digits.</li></ul><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><ul><li>Print the maximal value of $k$ on a single line.</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">Sample Input 1</th><th style="text-align:left">Sample Output 1</th></tr></thead><tbody><tr><td style="text-align:left"><code>652526</code></td><td style="text-align:left"><code>4</code></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">Sample Input 2</th><th style="text-align:left">Sample Output 2</th></tr></thead><tbody><tr><td style="text-align:left"><code>12121131221</code></td><td style="text-align:left"><code>7</code></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">Sample Input 3</th><th style="text-align:left">Sample Output 3</th></tr></thead><tbody><tr><td style="text-align:left"><code>123456789</code></td><td style="text-align:left"><code>1</code></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">Sample Input 4</th><th style="text-align:left">Sample Output 4</th></tr></thead><tbody><tr><td style="text-align:left"><code>132594414896459441321</code></td><td style="text-align:left"><code>9</code></td></tr></tbody></table></div><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一个由数字组成的字符串，让你对这个字符串进行切割，使其变成一个回文串，例如 $652526$ 且切割为 $6|52|52|6$ 之后，把 $52$ 看作一个字符，那么这个串就是回文的了，如果还不理解，看第二个样例，切割为 $1|2|12|113|12|2|1$，各部分分别看作一个字母，即变成回文串了，现在让你求最多的切割次数。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>显然，这个题目可以贪心解决，即用两个指针，一个从前面，一个从后面，同时开始扫，然后判断扫到的这两部分字符串是否相同，相同则切割，否则接着往下扫，直到两者是同一个串（即最中间的对称轴）或者 $i = j$ 。</p><p>这样做的时间复杂度是 $O(n^2)$，显然过不了。我们可以看出，这里能够进行优化的只有字符串比较那一部分了，但是直接比较 $O(n)$ 肯定不行，有什么 $O(1)$ 比较的方法吗？这里就要用到<strong>字符串哈希</strong>的技术了。</p><p>字符串哈希比较简单，这里不细讲，推荐一篇博客：</p><p><a href="https://blog.csdn.net/wangqianqianya/article/details/89670919">字符串哈希</a></p><p>讲的非常详细。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zpw                    \</span></span><br><span class="line">  ios::sync_with_stdio(<span class="literal">false</span>); \</span><br><span class="line">  <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);               \</span><br><span class="line">  <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ull p = <span class="number">1610612741</span>;</span><br><span class="line"></span><br><span class="line">ull Hash[maxn];</span><br><span class="line">ull po[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    Hash[i] = Hash[i - <span class="number">1</span>] * p + s[i] - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  po[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    po[i] = po[i - <span class="number">1</span>] * p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">getHash</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="keyword">return</span> Hash[r] - Hash[l - <span class="number">1</span>] * po[r - l + <span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  zpw;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line">  len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>, j = len;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * t &lt;= j - i + <span class="number">1</span> &amp;&amp;</span><br><span class="line">           getHash(i, i + t - <span class="number">1</span>) != getHash(j - t + <span class="number">1</span>, j)) &#123;</span><br><span class="line">      t++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> * t &gt; j - i + <span class="number">1</span>) &#123;</span><br><span class="line">      ans++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ans += <span class="number">2</span>;</span><br><span class="line">      i += t;</span><br><span class="line">      j -= t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">    ans++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">                                               .......@^..&#x2F;..........,&#x2F;[...........[@]..........&#x3D;^.</span><br><span class="line">                                               ......&#x3D;@\.&#x3D;^.......,[...................\@].......@&#96;</span><br><span class="line">                                               ......&#x3D;@OOOOO\&#96;..,.......]@@&#x2F;[[\@@\]......\O\.....&#x3D;^</span><br><span class="line">                                                ....&#x2F;@@@@@O@@@@@\...,&#x2F;[............\@\&#96;...,OO....,@</span><br><span class="line">                           ........... ..........,@@@@@OOOOO@@@@@@@&#x2F;....   ..   ....@OO@&#96;..,[.....@</span><br><span class="line">                            ....... ......  .. .,@@@@@@@@@@@@@@@@@@@^...       .....@OOO@\.......&#x3D;@</span><br><span class="line">                        ..............]]]]]]]]]]&#x2F;@@@@@@@@@@@@@@@@@@@@....   ..  ...,@@OO@O\......&#x3D;^</span><br><span class="line">                        ......]&#x2F;&#x2F;[...................[[\@@@@@@@@@@&#x2F;[@\..       ...,@O@OO@O@......@.</span><br><span class="line">                .........,&#x2F;&#x2F;&#96;................................[@@@O&#96;.&#x2F;O@&#96;........,&#x2F;@O@OO@OO@^....@&#96;.</span><br><span class="line">                  ...,&#x2F;&#x2F;&#96;..........,&#96;...........................,@@OO@@......,&#x2F;@@O@OOOOOOO@&#96;..,&#x2F;...</span><br><span class="line">            .......&#x2F;[.............OO&#96;.........]..........,\&#96;.......,@@\]]&#x2F;@@@OO@@OOOOOOOOO&#x2F;]@&#x2F;...  </span><br><span class="line">            ....,@&#96;..............&#x3D;O^.........&#x3D;O.............,\........\@OOOOOOOOOOOOOOOO@@&#x2F;&#96;.....  </span><br><span class="line">         . ...,&#x2F;.................O&#x2F;..........&#x2F;&#96;...............&#x3D;]........\@@@@\@@@@@@&#x2F;[[.......... .</span><br><span class="line">        . ..,@&#96;.................&#x2F;O^..........@O................,@^........\\.[\@\&#96;............  .. </span><br><span class="line">       ....&#x2F;^..................&#x3D;O@^.........&#x3D;@O^.....&#x3D;&#96;.........,@O........\@\&#96;..,[@@@]].......,\..</span><br><span class="line">        .,&#x2F;.......&#x3D;.......&#x2F;O..,@O@..........&#x3D;@@O&#96;....,O...........@O&#96;......&#x3D;@@@O&#96;.......,[\@@&#x2F;&#96;....</span><br><span class="line">........&#x3D;^.......&#x3D;&#96;.....&#x2F;\o&#x2F;..O&#x2F;o@..........@OO@O....&#x3D;\O...........\O&#96;.....&#x3D;@^\@OO\..@[[........  .</span><br><span class="line">.......&#x2F;^.......&#x2F;O.,&#x2F;@@@@@@@]&#x3D;@&#96;&#x3D;@..........@&#x2F;\O@O...&#x3D;\@O...........&#x3D;@.....&#x2F;^..\@OOOO&#96;,@&#96;........  </span><br><span class="line">. ....&#x2F;O&#96;......,@&#x2F;&#96;.&#x3D;@&#x2F;&#x2F;.&#x3D;O^.@&#96;.&#x3D;@^.........@^\O@@&#x2F;[[\@@@\...........,\.........@OO.[OO\&#96;[@&#96;.......</span><br><span class="line">.....&#x3D;OO,&#96;.....&#x2F;O..@Oo&#96;..o&#x3D;^&#x2F;^..,\^.........@^.\\&#x2F;@^..@&#x3D;o\@@\.........,@&#96;....,^.&#x3D;@OOO]......[@\... </span><br><span class="line">....&#x3D;@OO^.....&#x3D;@O,@o&#x2F;....&#x3D;O@&#x2F;....O\.........@^..&#x3D;o\\\.\.&#x3D;o&#x2F;@.\..........@&#96;..&#x2F;@...@@OOOOO]......,\@@</span><br><span class="line">.. .@@OO.....,@O@@o......&#x3D;&#x2F;@,....&#x2F;@.......&#x3D;.@^..,[[ooO&#x2F;^..oo@&#96;...........\@O@....@@OOO@@@@@@\]],]@&#x2F;</span><br><span class="line">...&#x3D;@OO^.....@@@O^......&#x3D;^o*.....&#x3D;O&#x2F;&#96;..*..&#x2F;O\^.....,oo.&#x3D;...\o@\...........,\....&#x3D;@@@@@@@@@@@[[&#96;....</span><br><span class="line">...@@O@.....@\@\........O@@......,&#x2F;@O.***.@&#x2F;@@.....&#x3D;&#96;,*.....,o&#x2F;@&#96;...........@...@@O@OOO@&#96;......... </span><br><span class="line">..&#x3D;@O@^....&#x3D;&#x2F;O^.......,^..@@......&#x3D;OO\****@o,@.....&#x3D;@@\......&#x3D;oO@\.....,.....\&#96;.OOO@^[@O@@&#96;........</span><br><span class="line">..&#x3D;@&#x2F;&#x2F;^...,@oO........@\.]@@^......&#x2F;O&#x2F;\,*&#x3D;@o^,&#96;...@..@@@......o&#x2F;OO@\...,^.....,@&#x2F;O@@^...,\@@@]&#96;.. .</span><br><span class="line">..@@.@....@O,&#x2F;.......&#x3D;@@@@@@^.......o,o\*,@o^....&#x3D;^..@@@^.....o&#x2F;@OOO@\&#96;.&#x3D;&#96;......,@@O\............  </span><br><span class="line">.&#x3D;@^&#x3D;&#x2F;...&#x3D;@^.........&#x3D;@@@@@@..........&#x3D;oO*@,o....@@@@@@@^.....&#x3D;O@^.OOO@\.&#x3D;&#96;.......,\&#x2F;............  </span><br><span class="line">.@@.&#x3D;^...@@..........&#x3D;@@@@@&#x2F;...........,oO@&#96;....&#x3D;@@@@@@@^.....,O@^..,OOO@@&#x2F;@\&#96;......,@&#96;.........   </span><br><span class="line">.@^.@^..&#x3D;@@...........@@@@&#x2F;.............,oO^.....@@@@@@&#x2F;.......o@^....,\@OOO@OO@O[[[[[..........   </span><br><span class="line">&#x3D;@..@^..&#x3D;@@...............................\^.....@@@@@@........o@^......@O[\&#96;&#x2F;^.*[.&#x3D;............   </span><br><span class="line">,@..@^..&#x2F;O@^......................................[@&#x2F;&#96;.........&#x3D;@.......@&#x2F;.&#x2F;@O^....&#x3D;............   </span><br><span class="line">.@..@^..@O@^...................................................&#x3D;@.......@@@OOOO....&#x2F;............   </span><br><span class="line">....@^..OOO@&#96;..................................................&#x3D;@.......@,@OOOO^...@............   </span><br><span class="line">  ..@^..OOOO@..................................................&#x3D;@......&#x3D;&#x2F;.,@OOO^...@............   </span><br><span class="line">....&#x3D;^..O^OO@\..............@@]]]&#96;.............................&#x3D;@......&#x3D;^...@OO^...@............   </span><br><span class="line">  . &#x3D;@..&#x3D;.&#x3D;OOO@&#96;............&#x3D;@@@@@@@@@@@@@@@@..................&#x3D;@......&#x3D;^....@OO...@............   </span><br><span class="line">. ...@^...*OOOO@@............@OO@@@@@@@@@@@@&#x2F;..................&#x2F;@......@.....,@O...@............   </span><br><span class="line">. ...&#x3D;\....\OO@OO@@&#96;..........\@OOOO@@OOOO&#x2F;&#96;...................@O.....,@......&#x3D;@^..@^...........   </span><br><span class="line">......@&#96;...*OO@OO@OO@\...........,[@@@@[&#96;.....................,@O....&#x2F;&#x3D;^......&#x3D;@^..@^...........   </span><br><span class="line">    ..&#x3D;\....&#x3D;O@OO@OOOOO@@]&#96;.................................&#x3D;@@@\...&#x3D;\&#x2F;......&#x3D;@O\..&#x3D;^...........   </span><br><span class="line">    ...@^....\@O@OOOOOOOOOO&#x2F;..................................&#x2F;@^..&#x3D;\@.....,@OOOO..&#x3D;@....          </span><br><span class="line">    ....@,^...@@OOOOOOOOO@^..................................,@O^.&#x3D;@@.....&#x2F;@OOO@O^..@...........   </span><br><span class="line">    ....,@&#x3D;^...@OOOOOOOO@^...................................&#x3D;@O.&#x2F;@@....&#x2F;@OOOOOO@O..\^...          </span><br><span class="line">        .,\@^..\@OOO@OOO&#x2F;....,]]&#96;.................,]]&#96;.......@O\@@&#x2F;..,@@OOOOOOOO@O&#96;..@..           </span><br><span class="line">        ...\@\..@OO@OOO@.....@*]]]&#96;[\\].]&#x2F;@].,&#x2F;@[****,\.....&#x3D;@@&#x2F;@^,@@@OO@OOOOOOO@O\..,^.           </span><br><span class="line">        ....@O@&#96;&#x3D;@@OOO@^.....@OOOOOOOOO@\]&#x2F;O@@OOOOOO\*@....&#x3D;@@\@&#x2F;.&#x3D;@OOOO@OOOOOOO@@O...&#x3D;^...........</span><br><span class="line">       ....@&#x3D;OOO@&#x2F;@OOO@&#96;....*\@OOOO@@@@@@@@@@@@@OOOO^&#x2F;&#96;...,@\oo&#x2F;...@OOOO@OOOOOOO@@O^,..\&#96;....,&#96;[&#x3D;&#96;&#96;</span><br><span class="line">        ..&#x2F;^.OOOOO@OOO@......\@OOO@@@@@&#x2F;&#x2F;\\O@@@@OOOO^@...&#x3D;\ooo&#x2F;....@@OOOO@OOOOOO@@OO.\..@....,*.*..</span><br><span class="line">        .&#x3D;&#x2F;..,OO@OOOO@^......&#x2F;@@@@@@@O@[[[[\@O@@@@@O&#x3D;^...&#x3D;o&#96;&#96;......@@OO@O@OOOOOO@@OO&#96;.^..@.........</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>我好蔡啊/(ㄒoㄒ)/~~</strong></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aizu 1634 Balance Scale</title>
      <link href="2019/08/22/Aizu-1634-Balance-Scale/"/>
      <url>2019/08/22/Aizu-1634-Balance-Scale/</url>
      
        <content type="html"><![CDATA[<h3 id="Balance-Scale"><a href="#Balance-Scale" class="headerlink" title="Balance Scale"></a>Balance Scale</h3><p>时间限制 : 8 sec</p><p>空间限制 : 262144 KB </p><p><a href="https://vjudge.net/problem/Aizu-1634">题目链接</a></p><p>You, an experimental chemist, have a balance scale and a kit of weights for measuring weights of powder chemicals.</p><p>For work efficiency, a single use of the balance scale should be enough for measurement of each amount. You can use any number of weights at a time, placing them either on the balance plate opposite to the chemical or on the same plate with the chemical. For example, if you have two weights of 2 and 9 units, you can measure out not only 2 and 9 units of the chemical, but also 11 units by placing both on the plate opposite to the chemical (Fig. C-1 left), and 7 units by placing one of them on the plate with the chemical (Fig. C-1 right). These are the only amounts that can be measured out efficiently.</p><a id="more"></a><p><img src="https://judgeapi.u-aizu.ac.jp/resources/images/ICPCDomestic2019_C1.png" alt="img">Fig. C-1 Measuring 11 and 7 units of chemical</p><p>You have at hand a list of amounts of chemicals to measure today. The weight kit already at hand, however, may not be enough to efficiently measure all the amounts in the measurement list. If not, you can purchase one single new weight to supplement the kit, but, as heavier weights are more expensive, you’d like to do with the lightest possible.</p><p>Note that, although weights of arbitrary positive masses are in the market, none with negative masses can be found.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The input consists of at most 100 datasets, each in the following format.</p><blockquote><p>n m<br>$a_1 a_2 … a_n$<br>$w_1 w_2 … w_n$</p></blockquote><p>The first line of a dataset has $n$ and $m$, the number of amounts in the measurement list and the number of weights in the weight kit at hand, respectively. They are integers separated by a space satisfying $1\le n\le 100$ and $1\le m \le10$.</p><p>The next line has the $n$ amounts in the measurement list, $a_1$ through $a_n$ ，separated by spaces. Each of $a_i$ is an integer satisfying $1\le a_i \le 10^9$, and $a_i \ne a_j$ holds for $i \ne j$.</p><p>The third and final line of a dataset has the list of the masses of the $m$ weights at hand, $w_1$ through $w_m$，separated by spaces. Each of $w_i$ is an integer, satisfying $1\le w_i\le 10^8$. Two or more weights may have the same mass.</p><p>The end of the input is indicated by a line containing two zeros.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each dataset, output a single line containing an integer specified as follows.</p><ul><li>If all the amounts in the measurement list can be measured out without any additional weights, $0$.</li><li>If adding one more weight will make all the amounts in the measurement list measurable, the mass of the lightest among such weights. The weight added may be heavier than $10^8$ units.</li><li>If adding one more weight is never enough to measure out all the amounts in the measurement list, $-1$.</li></ul><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">9 2 7 11</span><br><span class="line">2 9</span><br><span class="line">6 2</span><br><span class="line">7 3 6 12 16 9</span><br><span class="line">2 9</span><br><span class="line">5 2</span><br><span class="line">7 3 6 12 17</span><br><span class="line">2 9</span><br><span class="line">7 5</span><br><span class="line">15 21 33 48 51 75 111</span><br><span class="line">36 54 57 93 113</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h3 id="Output-for-the-Sample-Input"><a href="#Output-for-the-Sample-Input" class="headerlink" title="Output for the Sample Input"></a>Output for the Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">5</span><br><span class="line">-1</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一堆有一定重量的物品和砝码，每种砝码只能用一次，我们知道，把砝码放在天平两侧搭配可以称量不同重量的物品，现在问题来了，这些物品里有些是现有砝码无法称量的，让你添加一个砝码，使得所有物品都可以称量，且这个砝码的重量最小。若存在这么一个砝码，输出其重量，否则输出-1</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>数据量很小，直接3进制枚举每一种砝码的摆放情况，从而得出每一种物品可接受的砝码，然后取不同物品可取砝码的交的最小值。</p><p>此题巨坑，卡常卡到自闭，和STL有关的，除了sort基本在此题都无法使用（石油大学OJ，原OJ不卡常）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cnm,卡常的巅峰之作.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">100</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> vt[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> num_st[<span class="number">110</span>];</span><br><span class="line">ll st[<span class="number">110</span>][<span class="number">60000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intersection</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; num_st[s] &amp;&amp; j &lt; num_st[u]) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; num_st[s] &amp;&amp; st[s][i] &lt; st[u][j]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; num_st[u] &amp;&amp; st[u][j] &lt; st[s][i]) &#123;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; num_st[s] &amp;&amp; j &lt; num_st[u] &amp;&amp; st[s][i] == st[u][j]) &#123;</span><br><span class="line">      st[s][num++] = st[s][i];</span><br><span class="line">      i++;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="comment">// freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) &amp;&amp; (n || m)) &#123;</span><br><span class="line">    <span class="keyword">int</span> wr = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(num_st, <span class="number">0</span>, <span class="keyword">sizeof</span>(num_st));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="built_in">pow</span>(<span class="number">3</span>, m);</span><br><span class="line">    ll we[tot + <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> t = i;</span><br><span class="line">      ll num = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">          num += w[j];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">          num -= w[j];</span><br><span class="line">        &#125;</span><br><span class="line">        t /= <span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      we[i] = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="built_in">abs</span>(we[j])) &#123;</span><br><span class="line">          flag = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        vt[wr++] = i;</span><br><span class="line">        st[i][num_st[i]++] = a[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!wr) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wr; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = vt[i];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">        st[u][num_st[u]++] = <span class="built_in">abs</span>(we[j] - a[u]);</span><br><span class="line">      &#125;</span><br><span class="line">      sort(st[u], st[u] + num_st[u]);</span><br><span class="line">      num_st[u] = unique(st[u], st[u] + num_st[u]) - st[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s = vt[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; wr; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = vt[i];</span><br><span class="line">      num_st[s] = intersection(s, u);</span><br><span class="line">      <span class="keyword">if</span> (!num_st[s]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!num_st[s]) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, st[s][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客多校10 J Wood Processing</title>
      <link href="2019/08/18/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A110-J-Wood-Processing/"/>
      <url>2019/08/18/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A110-J-Wood-Processing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>时间限制：C/C++ 3秒，其他语言6秒<br>空间限制：C/C++ 524288K，其他语言1048576K<br>64bit IO Format: %lld</p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>In the wood industry, it is very common to make big wood boards by combining planks. To combine several planks into boards, the carpenter may cut some of the planks horizontally and discard one of the two parts, such that the heights of all planks are equal. Then, the planks are joined together, forming a big wood board. The height of the board is the common height of the planks, and the width of the board is the sum of the widths of the planks.</p><p><img src="https://uploadfiles.nowcoder.com/images/20190814/313347_1565716099777_430E17EA7886E3E280D5ABA1293D7362" alt="img"></p><a id="more"></a><p>However, cutting planks may result in huge wastes. The problem is, given n planks, determine the minimum total wasted area of planks to make k boards from these planks. You may freely reorder and combine these planks. Note that the mechanical properties of a plank are anisotropic, so you can’t rotate the planks. Also, all planks must be used; you cannot discard any whole plank.</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote><p>The first line of the input contains two integers $n$, $k$<br>($1 \leq n \leq 5000, 1 \leq k \leq 2000, k \leq n$), denoting the number of planks given and the number of boards to make.Each of the remaining n lines contains two integers w, h ($1 \leq w, h \leq 10^7$), denote the width and the height of a given plank.</p></blockquote><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote><p>Output the minimum wasted area as an integer.</p></blockquote><p>示例1</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">3 3</span><br><span class="line">4 7</span><br><span class="line">2 5</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>示例2</p><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">1 5</span><br><span class="line">1 6</span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你 $n$ 块木板，其摆放方式不能动，即竖着的是高，横着的是宽，现在让你去切割一些木板，合并一些木板，使得最后剩下的木板总数为 $k$ ，问最小浪费的面积是多少。注意，切割木板只能横着切，即若把宽对着 $x$ 轴，高对着 $y$ 轴，只能平行于 $x$ 轴去切割木板，木板被切成两部分后，上半部分即丢弃了（也就是浪费的面积），下半部分可以与和它同高的木板合并成一块。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><ul><li><p>首先是一个预处理，对这些木板按照高度去排序，高相同的则把宽较小的放前面，为什么呢？很容易想到，我们如果要把一块木板和别的木板合并，那么肯定是和高度小于等于它的合并，而且必然是优先合并高度与它相近的（这样浪费少），可能有人会问，为什么不能和高度比它高的木板合并呢？仔细想想，其实这是同一种情况，只不过“主角”不一样，对于与他合并的更高那块木板来说，不就是向下合并了吗？</p></li><li><p>排好序之后，其实就能够看出这个题目是个dp题了，考虑前 $j$ 块木板合并为 $i$ 块木板的情况的浪费面积为 $dp[i][j]$， 这样状态就已经定义好了，那么状态转移方程也容易想出来（<del>这个容易想出来是你有一定的dp基础，刷过至少几十道dp题的意思</del>），当我们求 $dp[i][j]$ 时，只需要考虑第 $j$ 块木板向前合并多少块，然后前面剩下的木板合并为 $i - 1$ 块，则转移方程为：</p></li></ul><script type="math/tex; mode=display">dp[i][j] = min_{k\in[1,j-1]}\{dp[i-1][k]+cost\{k + 1\rightarrow j\}\}</script><ul><li>其中 $cost{k + 1\rightarrow j}$ 表示从第 $k + 1$ 块至第 $j$ 块合并为一块的浪费面积，这个可以基于一定的预处理得到，以下给出公式：</li></ul><script type="math/tex; mode=display">cost\{k\rightarrow j\} = suma[j] - suma[k] - h(k + 1)\times(sumw[j] - sumw[k])</script><ul><li>其中 $suma[j]$ 表 $1$ ~ $j$ 木板的面积之和， $sumw[j]$ 表 $1$ ~ $j$ 的木板宽度之和，$h(k + 1)$ 表第 $k + 1$ 块木板的高。</li></ul><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>这样我们得到了一个相当复杂的状态转移方程。</p><p>好了，<strong>重点</strong>来了，如果我们直接就这么写，是 $O(kn^2)$ 的复杂度，emmmmmmmm,看到这个数据量，无疑是会TLE的，那么接下来就是本文的焦点，斜率优化。</p><p>这题的重点就是如果能够在 $O(1)$ 的时间内把那个 $min$ 求出来，博主这种菜鸡只能想到线段树或者单调队列优化了，但是想了半天都感觉这两种数据结构在这题里是没有用武之地的，然后从网上学了一波斜率优化，斜率优化的使用条件比较苛刻，但很多时候很多dp似乎都是满足它的使用条件的（黑人问号❓）。</p><p>我们假设现在有两个$k_1,k_2$值用于更新 $dp[i][j]$ ，假设 $k_2$ 优于 $k_1$，即</p><script type="math/tex; mode=display">dp[i-1][k_2]+cost\{k_2 + 1\rightarrow j\} \leq dp[i-1][k_1]+cost\{k_1 + 1\rightarrow j\}</script><p>对这个式子进行整理（不用怀疑，因为斜率优化的重点在于推出斜率表达式，得到：</p><script type="math/tex; mode=display">\frac{f(k_2) - f(k_1)}{h(k_2)-h(k_1)}\leq sumw[j] ......①</script><p>其中(假设当前在求 $dp[i][j]$ ,用 $dp[i-1][k]$ 更新 $dp[i][j]$ )：</p><script type="math/tex; mode=display">f(k) = dp[i - 1][k] - suma[k] + h(k + 1)\times sumw[k]</script><p>显然，$f(k)$ 的值与 $j$ 的取值无关，不等式右边的 $sumw[j]$ 对于当前求的 $dp[i][j]$ 来说是个定值，而且 $sumw[j]$ 随着 $j$ 增大时递增的（后面会讲，这是一个重要条件），设①式为 $g[k_2, k_1]$ ，则只需 $g[k_2, k_1]\leq sumw[j]$ 则有 $k_2$ 优于 $k_1$。</p><p>由于我们的内层循环（即 $j$ )是按照顺序（$1\rightarrow n$）进行dp的，不妨设 $k1 &lt; k2 &lt; j$ （对，你没看错，即使我们现在求的就是 $dp[i][j]$ 的值，但这里考虑了 $j$, 因为这里是 $j$ 应该如何入队，与 $dp[i][j]$ 的值无关），若 $g[j,k_2]\leq g[k_2,k1]$ ，则 $k_2$ 一定不是最优解，证：</p><blockquote><p>若 $g[j,k_2] \leq sumw[j]$ 则 $j$ 比 $k_2$ 优。</p><p>若 $g[j,k_2]\geq sumw[j]$ 则 $k_2$ 比 $j$ 优，但 又 $g[k_2,k_1]\geq g[j,k_2]$，所以 $g[k_2,k_1] \geq sumw[j]$ ，所以 $k_1$ 优于 $k_2$ 。</p></blockquote><p>所以我们需要维护一个队列，队列内的元素 <script type="math/tex">k_1,k_2, ...，</script> 满足相邻元素间 <script type="math/tex">g[a_i, a_{i-1}] \geq g[a_{i-1},a_{i-2}]</script>  ，那么到求 $dp[i][j]$ 时，只需判断队首的两个元素 <script type="math/tex">a_1, a_2</script> 的斜率 <script type="math/tex">g[a_2, a_1]</script> 与 <script type="math/tex">sumw[j]</script> 的关系。</p><blockquote><p>若 $g[a_2, a_1]\leq sumw[j]$ ，则 $a_2$ 必比 $a_1$ 优，所以可以把队首元素 $a_1$ 弹出，直到队内元素数量 = 1 或者 $g[a_2, a_1] \geq sumw[j]$ ，此时 $a1$ 比 $a_2$ 优，则 $a_1$ 就是最优解，为什么？我们前面说了，这个队列的元素间满足的关系！所以有 $a_1$ 优于 $a_2$ ，$a_2$ 优于 $a_3$ ，依次类推，所以 $a_1$ 即队首元素为最优！这就是斜率优化的精髓！</p><p>更新完 $dp[i][j]$ 之后，相应的，$j$  也需要入队，为了保持队列元素间斜率的递增性质，依据上面已经证明过的弹出性质，设队列的大小为 $m$, 则当 <script type="math/tex">g[j,a_m] \leq g[a_m, a_{m-1}]</script> 时，弹出 <script type="math/tex">a_m</script> 即队尾元素，直到队列元素数量 = 2 或 <script type="math/tex">g[j,a_m] \geq g[a_m, a_{m-1}]</script></p></blockquote><p>那又为什么断定队首被出队的元素以后就没用了呢？就因为 $sumw$ 是递增的！这就是斜率优化的使用条件。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这题有个坑爹的地方，就是有些地方的乘法可能会爆long long， 所以要用__int128_t，博主由于这个原因WA了很多发……，找了很久才找出来。</p><p><img src="/2019/08/18/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A110-J-Wood-Processing/1.png" alt="1"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zpw                    \</span></span><br><span class="line">  ios::sync_with_stdio(<span class="literal">false</span>); \</span><br><span class="line">  <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);               \</span><br><span class="line">  <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">__int128_t</span> llint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  ll w, h;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (h == t.h) &#123;</span><br><span class="line">      <span class="keyword">return</span> w &lt; t.w;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> h &lt; t.h;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; p[maxn];</span><br><span class="line"></span><br><span class="line">ll dp[<span class="number">2010</span>][maxn];</span><br><span class="line">ll sumw[maxn];</span><br><span class="line">ll suma[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getUp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k1, <span class="keyword">int</span> k2)</span> </span>&#123;</span><br><span class="line">  ll t1 = dp[i][k1] - suma[k1] + p[k1 + <span class="number">1</span>].h * sumw[k1];</span><br><span class="line">  ll t2 = dp[i][k2] - suma[k2] + p[k2 + <span class="number">1</span>].h * sumw[k2];</span><br><span class="line">  <span class="keyword">return</span> t1 - t2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getDown</span><span class="params">(<span class="keyword">int</span> k1, <span class="keyword">int</span> k2)</span> </span>&#123; <span class="keyword">return</span> p[k1 + <span class="number">1</span>].h - p[k2 + <span class="number">1</span>].h; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getDp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dp[i - <span class="number">1</span>][k] + suma[j] - suma[k] - p[k + <span class="number">1</span>].h * (sumw[j] - sumw[k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  zpw;</span><br><span class="line">  <span class="keyword">int</span> n, k;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p[i].w &gt;&gt; p[i].h;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(p + <span class="number">1</span>, p + n + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    sumw[i] = sumw[i - <span class="number">1</span>] + p[i].w;</span><br><span class="line">    suma[i] = suma[i - <span class="number">1</span>] + p[i].w * p[i].h;</span><br><span class="line">    dp[<span class="number">1</span>][i] = suma[i] - sumw[i] * p[<span class="number">1</span>].h;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k; i++) &#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push_back(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      <span class="keyword">while</span> (q.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((llint)getUp(i - <span class="number">1</span>, q[<span class="number">1</span>], q[<span class="number">0</span>]) &lt;=</span><br><span class="line">            (llint)sumw[j] * (llint)getDown(q[<span class="number">1</span>], q[<span class="number">0</span>])) &#123;</span><br><span class="line">          q.pop_front();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      dp[i][j] = getDp(i, j, q.front());</span><br><span class="line">      <span class="keyword">while</span> (q.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = q.size();</span><br><span class="line">        llint t1 = (llint)getUp(i - <span class="number">1</span>, j, q[m - <span class="number">1</span>]) *</span><br><span class="line">                   (llint)getDown(q[m - <span class="number">1</span>], q[m - <span class="number">2</span>]);</span><br><span class="line">        llint t2 = (llint)getUp(i - <span class="number">1</span>, q[m - <span class="number">1</span>], q[m - <span class="number">2</span>]) *</span><br><span class="line">                   (llint)getDown(j, q[m - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (t1 &lt;= t2) &#123;</span><br><span class="line">          q.pop_back();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      q.push_back(j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; dp[k][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 斜率优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2015 二叉苹果树</title>
      <link href="2019/08/14/P2015-%E4%BA%8C%E5%8F%89%E8%8B%B9%E6%9E%9C%E6%A0%91/"/>
      <url>2019/08/14/P2015-%E4%BA%8C%E5%8F%89%E8%8B%B9%E6%9E%9C%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="P2015-二叉苹果树"><a href="#P2015-二叉苹果树" class="headerlink" title="P2015 二叉苹果树"></a>P2015 二叉苹果树</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一棵苹果树，如果树枝有分叉，一定是分2叉（就是说没有只有1个儿子的结点）</p><p>这棵树共有 $N$ 个结点（叶子点或者树枝分叉点），编号为1-N,树根编号一定是1。</p><p>我们用一根树枝两端连接的结点的编号来描述一根树枝的位置。下面是一颗有4个树枝的树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2   5</span><br><span class="line"> \ &#x2F; </span><br><span class="line">  3   4</span><br><span class="line">   \ &#x2F;</span><br><span class="line">    1</span><br></pre></td></tr></table></figure><p>现在这颗树枝条太多了，需要剪枝。但是一些树枝上长有苹果。</p><p>给定需要保留的树枝数量，求出最多能留住多少苹果。</p><a id="more"></a><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第1行2个数，$N$ 和 $Q$($1\leq Q\leq N,1&lt;N\leq100$)。</p><p>$N$ 表示树的结点数，$Q$ 表示要保留的树枝数量。接下来 $N-1$ 行描述树枝的信息。</p><p>每行3个整数，前两个是它连接的结点的编号。第3个数是这根树枝上苹果的数量。</p><p>每根树枝上的苹果不超过30000个。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个数，最多能留住的苹果的数量。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入 #1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">1 3 1</span><br><span class="line">1 4 10</span><br><span class="line">2 3 20</span><br><span class="line">3 5 20</span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>啊，树形dp入门题，按照深度优先的顺序去遍历树，在过程中进行dp。</p><p>很容易想到，按照每个节点作为一颗子树去进行dp，设状态为 $dp(u, i)$， 其中 $u$ 为当前节点的编号， $i$ 为当前节点为子树，保留 $i$ 条边，则 $dp(u, i)$ 显然为此时保留的最大的🍎的数量。</p><p>如何进行状态转移？既然都叫树形dp，肯定是由其子节点转移而来。想象一下这个dp过程，把 $u$ 的孩子节点的为根的子树一棵一棵加进来，去更新 $dp(u, i)$ 的值。</p><blockquote><p>例如，假设要保留 3 条边，1 为根节点，1 的孩子节点为 2, 3, 4.</p><p>那么刚开始的时候 1 为根节点的树是空树，由于我们是按照深度优先去进行dp的，所以</p><p>$dp[i][j],i \in [2, 4], j \in [0, 3]$ 的值都是已经求出来的了。先把 2 为根的子树加进去，更新</p><p>$dp[1][j], j \in [0, 3]$， 然后再把 3， 4 一个一个加进去，利用孩子节点的dp值更新父节点，这就是此题的基本思路。</p></blockquote><p>状态转移方程为：</p><script type="math/tex; mode=display">dp[u][j] = max\{dp[u][j], dp[u][j - k - 1] + dp[v][k] + cost(e_i)\}</script><p>其中：</p><script type="math/tex; mode=display">j \in [0, min\{m, size(u)\}], k \in[0, min\{j - 1, size(v)\}]</script><p>其实这题完全可以拓展至多叉树或者无根树，代码几乎不需要变动。</p><p>更多细节看代码里的注释</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> to, co, nxt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];  <span class="comment">// dp&#123;i, j&#125;， 当前节点编号，保留的边数</span></span><br><span class="line">edge e[<span class="number">2</span> * maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];  <span class="comment">// 编号为 i 的节点为根的子树有多少条边</span></span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> ff, <span class="keyword">int</span> tt, <span class="keyword">int</span> cc)</span> </span>&#123;</span><br><span class="line">  e[tot] = edge&#123;tt, cc, head[ff]&#125;;</span><br><span class="line">  head[ff] = tot++;</span><br><span class="line">  e[tot] = edge&#123;ff, cc, head[tt]&#125;;</span><br><span class="line">  head[tt] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = e[i].nxt) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">    <span class="keyword">if</span> (v == fa) &#123;  <span class="comment">// 遇到父节点跳过</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(v, u);             <span class="comment">// 按照深度优先，先dfs孩子节点</span></span><br><span class="line">    num[u] += num[v] + <span class="number">1</span>;  <span class="comment">// dfs的同时求一下该点为根节点子树的边数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为什么当前保存的边数 j 要倒着dp？和01背包的滚动数组类似，</span></span><br><span class="line">    <span class="comment">// dp[u][j]在更新后，不会在后面的更新中用到，而正着dp就会出问题了，</span></span><br><span class="line">    <span class="comment">// 那样你会用到在加入 v 子节点后，被更新过的dp[u][j]的值，显然是错误的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = min(num[u], q); j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="comment">// k正着反着倒无所谓</span></span><br><span class="line">      <span class="comment">// 这里有个细节，为什么 k 取的是min&#123;num[v], j - 1&#125;而不是min&#123;num[v], j&#125;?</span></span><br><span class="line">      <span class="comment">// 因为，既然我要把点 v 加进来，那肯定是要有一条边把 u 和 v</span></span><br><span class="line">      <span class="comment">// 连起来，那条边就是e[i]，所以 k 最多取的是min&#123;num[v], j - 1&#125;</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = min(num[v], j - <span class="number">1</span>); k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">        dp[u][j] = max(dp[u][j], dp[u][j - k - <span class="number">1</span>] + dp[v][k] + e[i].co);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> ff, tt, cc;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;ff, &amp;tt, &amp;cc);</span><br><span class="line">    add_edge(ff, tt, cc);</span><br><span class="line">  &#125;</span><br><span class="line">  dfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[<span class="number">1</span>][q]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快开学了T_T</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf 579E Boxers</title>
      <link href="2019/08/14/cf-579E-Boxers/"/>
      <url>2019/08/14/cf-579E-Boxers/</url>
      
        <content type="html"><![CDATA[<h3 id="E-Boxers"><a href="#E-Boxers" class="headerlink" title="E. Boxers"></a>E. Boxers</h3><blockquote><p>time limit per test:2 seconds<br>memory limit per test:256 megabytes<br>input:standard input<br>output:standard output</p></blockquote><p>There are $n$ boxers, the weight of the $i-th$ boxer is $a_i$. Each of them can change the weight by no more than $1$ before the competition (the weight cannot become equal to zero, that is, it must remain positive). Weight is always an integer number.</p><p>It is necessary to choose the largest boxing team in terms of the number of people, that all the boxers’ weights in the team are different (i.e. unique).</p><a id="more"></a><p>Write a program that for given current values $a_i$ will find the maximum possible number of boxers in a team.</p><p>It is possible that after some change the weight of some boxer is $150001$ (but no more).</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line contains an integer $n$ ($1\leq n\leq 150000$) — the number of boxers. The next line contains $n$ integers $a_1,a_2,…,a_n$, where $a_i$($1\leq a_i\leq 150000$) is the weight of the $i-th$ boxer.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Print a single integer — the maximum possible number of people in a team.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3 2 4 1</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 1 1 4 4 4</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>In the first example, boxers should not change their weights — you can just make a team out of all of them.</p><p>In the second example, one boxer with a weight of 1 can be increased by one (get the weight of 2), one boxer with a weight of 4 can be reduced by one, and the other can be increased by one (resulting the boxers with a weight of 3 and 5, respectively). Thus, you can get a team consisting of boxers with weights of 5,4,3,2,1.</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你 $n$ 个数，每个数的大小可以变动的大小为 1，但 1 不能变成 0，问你最多可以有多少个不同的数。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>很明显的贪心，先把所有数排好序，统计一下数量，再扫一遍，分情况讨论，能往左靠的数就尽量往左靠（其实更好的做法就是排完序扫一遍就行了，判断一下他的前后有没有变过，不必统计…头脑不清醒，没想那么多就直接敲了，哎）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> u, num;</span><br><span class="line">&#125; p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">  <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">  sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] == a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">      p[tot].num++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      p[++tot].u = a[i];</span><br><span class="line">      p[tot].num = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ans;</span><br><span class="line">  <span class="keyword">if</span> (p[<span class="number">1</span>].u == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p[<span class="number">1</span>].num &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">      ans = <span class="number">2</span>;</span><br><span class="line">      b[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ans = <span class="number">1</span>;</span><br><span class="line">      b[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p[<span class="number">1</span>].num &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">      b[<span class="number">1</span>] = p[<span class="number">1</span>].u + <span class="number">1</span>;</span><br><span class="line">      ans = <span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[<span class="number">1</span>].num == <span class="number">2</span>) &#123;</span><br><span class="line">      b[<span class="number">1</span>] = p[<span class="number">1</span>].u;</span><br><span class="line">      ans = <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      b[<span class="number">1</span>] = p[<span class="number">1</span>].u - <span class="number">1</span>;</span><br><span class="line">      ans = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tot; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p[i].u &gt; b[i - <span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p[i].num &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        b[i] = p[i].u + <span class="number">1</span>;</span><br><span class="line">        ans += <span class="number">3</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[i].num == <span class="number">2</span>) &#123;</span><br><span class="line">        b[i] = p[i].u;</span><br><span class="line">        ans += <span class="number">2</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        b[i] = p[i].u - <span class="number">1</span>;</span><br><span class="line">        ans += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (b[i - <span class="number">1</span>] == p[i].u) &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        b[i] = p[i].u + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[i - <span class="number">1</span>] == p[i].u - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].num == <span class="number">1</span>) &#123;</span><br><span class="line">          ans += <span class="number">1</span>;</span><br><span class="line">          b[i] = p[i].u;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ans += <span class="number">2</span>;</span><br><span class="line">          b[i] = p[i].u + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>晚上状态不是很好，写题的时候手忙脚乱的，犯了各种奇奇怪怪的错误，交了很多次才AC</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 2373 Dividing the Path</title>
      <link href="2019/08/13/POJ-2373-Dividing-the-Path/"/>
      <url>2019/08/13/POJ-2373-Dividing-the-Path/</url>
      
        <content type="html"><![CDATA[<h3 id="Dividing-the-Path"><a href="#Dividing-the-Path" class="headerlink" title="Dividing the Path"></a>Dividing the Path</h3><blockquote><p>友情链接：<a href="http://poj.org/problem?id=2373">POJ - 2373 </a></p></blockquote><p>Farmer John’s cows have discovered that the clover growing along the ridge of the hill in his field is particularly good. To keep the clover watered, Farmer John is installing water sprinklers along the ridge of the hill. </p><p>To make installation easier, each sprinkler head must be installed along the ridge of the hill (which we can think of as a one-dimensional number line of length L ($1\leq L\leq1,000,000$); L is even). </p><a id="more"></a><p>Each sprinkler waters the ground along the ridge for some distance in both directions. Each spray radius is an integer in the range A..B ($1 \leq A \leq B \leq 1000$). Farmer John needs to water the entire ridge in a manner that covers each location on the ridge by exactly one sprinkler head. Furthermore, FJ will not water past the end of the ridge in either direction. </p><p>Each of Farmer John’s N ($1\leq N\leq 1000$) cows has a range of clover that she particularly likes (these ranges might overlap). The ranges are defined by a closed interval (S,E). Each of the cow’s preferred ranges must be watered by a single sprinkler, which might or might not spray beyond the given range. </p><p>Find the minimum number of sprinklers required to water the entire ridge without overlap. </p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>* Line 1: Two space-separated integers: N and L </p><p>* Line 2: Two space-separated integers: A and B </p><p>* Lines 3..N+2: Each line contains two integers, S and E ($0\leq S &lt; E\leq L$) specifying the start end location respectively of a range preferred by some cow. Locations are given as distance from the start of the ridge and so are in the range $0..L$.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>* Line 1: The minimum number of sprinklers required. If it is not possible to design a sprinkler head configuration for Farmer John, output -1.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 8</span><br><span class="line">1 2</span><br><span class="line">6 7</span><br><span class="line">3 6</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>INPUT DETAILS: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">            |-----c2----|-c1|       cows&#39; preferred ranges</span><br><span class="line">|---1---|-------2-------|---3---|   sprinklers</span><br><span class="line">+---+---+---+---+---+---+---+---+</span><br><span class="line">0   1   2   3   4   5   6   7   8</span><br></pre></td></tr></table></figure><p>The sprinklers are not considered to be overlapping at 2 and 6.</p><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>有一条长为 $L$ 的线段，线段上的点从 $0$ 到 $L$ 编号，线段上有 $n$ 头🐂，每头🐂有自己的活动范围为$(S, L)$ ，现在你有一种喷洒半径为 $[A, B]$ 的喷头，即每一个这种喷头可在该区间内选定一个值作为喷洒半径，现在让你去线段上放置喷头，每个点必须且只能被一个喷头覆盖，喷头的喷洒范围不能超过线段的两端，每一头🐂的活动范围至少要被一个喷头完全覆盖，请问最少需要放置多少个喷头？如果不可能，输出-1</p><h3 id="解题方案："><a href="#解题方案：" class="headerlink" title="解题方案："></a>解题方案：</h3><p>本渣渣想了半天想不到按照什么去 dp， 看了提示是按照覆盖至某一个点，然后自己又想了半天，WA了无数次，才得以AC。</p><p>设 $dp(x)$ 为，左端点为 $0$，右端点覆盖至 $x$ 时的最少放置数，那么我们就可以知道，以 x 为右端点，喷头的放置位置为 $[x - B, x - A]$，这是显然的，另外一个不好想到的点是，$x$ 不能处于任意一头🐂的活动范围内，为啥？注意到条件，每个点必须且只能被覆盖一次（端点不算），若 $x$ 处于某头牛的活动范围内，则这头牛的活动范围就不能被某一喷头覆盖了，必然至少两个喷头所分割。同理，该喷头的左端点理论上也是要满足这个条件的，但其实处理时左端点无需加此判断（看代码思考）。</p><p>该喷头的左端点范围是 $[x - 2B, x - 2A]$ 那么，状态转移方程就是 </p><script type="math/tex; mode=display">dp(x) = min(dp(i)) + 1，其中 x - 2 * B \leq i \leq x - 2 * A</script><p>这里涉及到一个优化，即若我们暴力的去区间 $[x - 2B, x - 2A]$ 里找最小的 $dp(i)$ 的话，肯定是会超时的（注意数据范围），那么就要用的单调队列进行优化（上一篇博客，此处不细讲）</p><p>（一个很讨厌的事(╯▔皿▔)╯，POJ的老年评测姬不支持万能头，记得把头文件改下）</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dividing the Path</span></span><br><span class="line"><span class="comment"> * POJ-2373</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> l, r;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l == t.l) &#123;</span><br><span class="line">      <span class="keyword">return</span> r &lt; t.r;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> l &lt; t.l;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; a[<span class="number">1000</span> + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="keyword">bool</span> iscow[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, l, A, B;</span><br><span class="line">  <span class="built_in">memset</span>(dp, inf, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;l);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;A, &amp;B);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i].l, &amp;a[i].r);</span><br><span class="line">  &#125;</span><br><span class="line">  sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;  <span class="comment">// 把牛的活动范围标一下，注意端点，容易出错</span></span><br><span class="line">    <span class="keyword">int</span> tl = max(a[i].l + <span class="number">1</span>, a[i - <span class="number">1</span>].r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = tl; j &lt; a[i].r; j++) &#123;</span><br><span class="line">      iscow[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">  q.push_back(<span class="number">0</span>);</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * A; j &lt;= l; j += <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 注意 t2 一定要先比 t1 入队！</span></span><br><span class="line">    <span class="keyword">int</span> t2 = j - <span class="number">2</span> * A - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty() &amp;&amp; dp[q.back()] &gt;= dp[t2]) &#123;</span><br><span class="line">      q.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">    q.push_back(t2);</span><br><span class="line">    <span class="keyword">int</span> t1 = j - <span class="number">2</span> * A;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty() &amp;&amp; dp[q.back()] &gt;= dp[t1]) &#123;</span><br><span class="line">      q.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">    q.push_back(t1);</span><br><span class="line">    <span class="keyword">if</span> (!iscow[j]) &#123;</span><br><span class="line">      <span class="keyword">while</span> (!q.empty() &amp;&amp; q.front() &lt; j - <span class="number">2</span> * B) &#123;</span><br><span class="line">        q.pop_front();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (q.empty()) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      dp[j] = dp[q.front()] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (dp[l] &gt;= inf) &#123;</span><br><span class="line">    dp[l] = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[l]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续刷 dp。(ノ｀Д)ノ</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019杭电多校7 1006-Final Exam</title>
      <link href="2019/08/12/2019-HDUMul-7-Final-Exam/"/>
      <url>2019/08/12/2019-HDUMul-7-Final-Exam/</url>
      
        <content type="html"><![CDATA[<h3 id="Final-Exam"><a href="#Final-Exam" class="headerlink" title="Final Exam"></a>Final Exam</h3><p><strong>Time Limit: 4000/2000 MS (Java/Others)</strong></p><p><strong>Memory Limit: 524288/524288 K (Java/Others)</strong></p><h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>Final Exam is coming! Cuber QQ has now one night to prepare for tomorrow’s exam.</p><p>The exam will be a exam of problems sharing altogether m points. Cuber QQ doesn’t know about the exact distribution. Of course, different problems might have different points; in some extreme cases, some problems might worth 0 points, or all m points. Points must be integers; a problem cannot have 0.5 point.</p><a id="more"></a><p>What he knows, is that, these n problems will be about n totally different topics. For example, one could be testing your understanding of Dynamic Programming, another might be about history of China in 19th century. So he has to divide your night to prepare each of these topics separately. Also, if one problem is worth x points in tomorrow’s exam, it takes at least x+1 hours to prepare everything you need for examination. If he spends less than x+1 hours preparing, he shall fail at this problem.</p><p>Cuber QQ’s goal, strangely, is not to take as much points as possible, but to solve at least k problems no matter how the examination paper looks like, to get away from his parents’ scoldings. So he wonders how many hours at least he needs to achieve this goal.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input is an integer $t$ ($1\leq t \leq 20 000$), denoting the number of test cases.</p><p>Each test case are three space-separated integers $n$,$m$,$k$ ($0\leq m \leq 10^9, 1 \leq k \leq n \leq 10^9$). </p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output the number of hours Cuber QQ needs.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 10 1</span><br><span class="line">10 109 10</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">1100</span><br></pre></td></tr></table></figure><p>Hint</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cuber QQ should solve one problem in sample 1, so he at least prepares 11 hours when the problem one is 10 point. </span><br><span class="line">Cuber QQ should solve all the ten problems in sample 2, so he at least prepares 110 hours for each problem because there may be one problem is 109 point.</span><br></pre></td></tr></table></figure><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>给你 $n$ 个题，这些题目的总分是 $m$，你不知道分数是如何分配的。假设一个题目的分数是 $x$ ，那么如果你想通过这道题，则至少需要花费 $x + 1$ 的时间去复习，现在问你，能够答对 $k$ 道题的最少复习时间是多少。</p><p>题意很绕……，前前后后读题大概花了30分钟。这题麻烦就麻烦在，你是不知道分数的分配的，所以如果不从反面加以考虑是很难处理的。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><ul><li><p>反面</p><p>我们从反面加以考虑，如果你是出题老师，该如何让答题者过不了关？（假设你知道对方的复习情况，这是一个很重要的前提，因为这就是答题者能够碰到的最坏情况,好好想想为什么），那么，我们贪心的去考虑，先把题目按照答题者的复习时间从短到长排个序, 即 <script type="math/tex">A_1, A_2, ..., A_{n-k+1}, ..., A_n</script>,如果我们尽量想让答题者回答不了 $k$ 题,则需从左到右安排 $A_i$ 的分数,让其分数等于复习时间,即刚好不能答出(为啥先把复习时间少的题目的分数安排好?这就是贪心的地方!因为总分数是有限的,即 $ m $,先安排分数少的可以剩下更多的分数安排后面的)。</p></li><li><p>正面</p><p>现在你知道出题老师是怎么卡你的了,那我该怎么复习才一定能够过 $k$ 个题目呢? </p><p>同样按照复习时间把问题排序,<script type="math/tex">A_1, A_2, ..., A_{n-k+1}, ..., A_n</script>, 要保证一定能够答对 $k$ 个的话,只需考虑前 $ n - k + 1 $ 个问题不会被卡(注意,已经按照复习时间长短排好序了,出题人卡你的方案如上),即前 $n - k + 1$ 个问题中至少能够答对一个问题!然而出题人能够用的总的分数就是 $ m $ ,那么只要前 $n - k + 1$ 个问题花费的总复习时间超过 $m$ 就可以了，那我们肯定取 $m + 1$ ，即前 $n - k + 1$ 个问题总复习时间为 $m + 1$ ，这样就可以保证前 $n - k + 1$ 个问题里至少可以对 1 个，而卡后面 $k - 1$ 个是不划算的，上面分析了，而我们要让总复习时间最少，则考虑让 <script type="math/tex">A_{n-k+1}</script> 最小（想想为什么），然后后面的 <script type="math/tex">k - 1</script> 个问题也和 <script type="math/tex">A_{n-k+1}</script> 取同样的时长。</p><p>所以最终时间就是</p><script type="math/tex; mode=display">m + 1 + A_{n-k+1} * (k - 1), 其中 A_{n-k+1}=\lceil \frac{m + 1}{n - k + 1}\rceil</script></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    ll n, m, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">if</span> (n == k) &#123;  <span class="comment">// 全部答对</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, k * (m + <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ll num = n - k + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 前 n - k + 1 个问题分配 m + 1 的复习时间， 其中最长复习时间的最小值</span></span><br><span class="line">      ll sc = <span class="built_in">ceil</span>((m + <span class="number">1</span>) * <span class="number">1.0</span> / num);</span><br><span class="line">      <span class="comment">// 后面 k - 1 个问题的复习时间也取 sc</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, m + <span class="number">1</span> + sc * (k - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总而言之，巨菜……， 疯狂签到 + 挂机自闭划水，要学的东西还很多，思维上差很多。</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1886 滑动窗口</title>
      <link href="2019/08/12/P1886-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>2019/08/12/P1886-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>现在有一堆数字共N个数字($N \leq 10^6$），以及一个大小为k的窗口。现在这个从左边开始向右滑动，每次滑动一个单位，求出每次滑动后窗口中的最大值和最小值。</p><p>例如：</p><p>The array is [1 3 -1 -3 5 3 6 7], and k = 3.</p><p><img src="https://cdn.luogu.org/upload/pic/688.png" alt="img"></p><a id="more"></a><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入一共有两行，第一行为n,k。</p><p>第二行为n个数(&lt;INT_MAX).</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出共两行，第一行为每次窗口滑动的最小值</p><p>第二行为每次窗口滑动的最大值</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入 #1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 3</span><br><span class="line">1 3 -1 -3 5 3 6 7</span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1 -3 -3 -3 3 3</span><br><span class="line">3 3 5 5 6 7</span><br></pre></td></tr></table></figure><h3 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h3><p>50%的数据， $ n \leq 10^5 $</p><p>100%的数据，$ n \leq 10^6 $</p><p>前几天听肖大佬提到了单调队列，特来补题，不过似乎单调队列用的没有单调栈那么多:-)</p><p>思路：</p><blockquote><p>维护两个单调的双端队列：</p><p>一个单调递增，该队列的最左端即为当前区间的最小元素。入队一个元素时，若队尾的元素&gt;=当前元素，则它们对最小值毫无贡献，可直接弹出，直到队列为空或碰到比当前元素小的。然后队列左端也要把id不属于这个区间的弹出，之后更新答案</p><p>一个单调递减，该队列的最左端即为当前区间的最大元素。入队一个元素时，若队尾的元素&lt;=当前元素，则它们对最大值毫无贡献，可直接弹出，直到队列为空或碰到比当前元素大的。然后队列左端也要把id不属于这个区间的弹出，之后更新答案。</p></blockquote><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> mina[maxn];  <span class="comment">// [i, i + k - 1] 这个区间最小元素的下标</span></span><br><span class="line"><span class="keyword">int</span> maxa[maxn];  <span class="comment">// [i, i + k - 1] 这个区间最大元素的下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, k;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q1, q2;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (q1.empty()) &#123;  <span class="comment">// 队列为空直接入队</span></span><br><span class="line">      q1.push_back(i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (!q1.empty() &amp;&amp; a[q1.back()] &gt;= a[i]) &#123;  <span class="comment">// 当以前的值&gt;=当前值时，</span></span><br><span class="line">        q1.pop_back();  <span class="comment">// 则这些值就无用了，可直接弹出（求最小值）</span></span><br><span class="line">      &#125;</span><br><span class="line">      q1.push_back(i);               <span class="comment">// 入队</span></span><br><span class="line">      <span class="keyword">while</span> (q1.front() &lt;= i - k) &#123;  <span class="comment">// 把下标不在当前区间的队首元素弹出</span></span><br><span class="line">        q1.pop_front();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) &#123;  <span class="comment">// 获取答案</span></span><br><span class="line">        mina[i - k + <span class="number">1</span>] = q1.front();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (q2.empty()) &#123;  <span class="comment">// 队列为空直接入队</span></span><br><span class="line">      q2.push_back(i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (!q2.empty() &amp;&amp; a[q2.back()] &lt;= a[i]) &#123;  <span class="comment">// 当以前的值&lt;=当前值时，</span></span><br><span class="line">        q2.pop_back();  <span class="comment">// 则这些值就无用了，可直接弹出（求最大值）</span></span><br><span class="line">      &#125;</span><br><span class="line">      q2.push_back(i);               <span class="comment">// 入队</span></span><br><span class="line">      <span class="keyword">while</span> (q2.front() &lt;= i - k) &#123;  <span class="comment">// // 把下标不在当前区间的队首元素弹出</span></span><br><span class="line">        q2.pop_front();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) &#123;  <span class="comment">// 获取答案</span></span><br><span class="line">        maxa[i - k + <span class="number">1</span>] = q2.front();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - k + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[mina[i]]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - k + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[maxa[i]]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 3554 Almost the shortest route</title>
      <link href="2019/08/11/POJ-3554-Almost-the-shortest-route/"/>
      <url>2019/08/11/POJ-3554-Almost-the-shortest-route/</url>
      
        <content type="html"><![CDATA[<p>题面</p><p>描述：</p><p><strong>N</strong> cities (2 ≤ <strong>N</strong> ≤ 10 000 ) are connected by a network of <strong>M</strong> one-way roads (1 ≤ <strong>M</strong> &lt;100 000 000 ). It is known that these roads do not cross outside the cities. The numeration of the cities and the roads starts from 1.There is at most one road from any city to another one. The length of each road does not exceed 10 000 .</p><p>The company for which you work sends you on a business trip from city 1 to city <strong>N</strong> on your personal car. The trip expenses will be compensated to you only if the distance you drive will differ from the shortest possible by no more than <strong>K</strong> (0 ≤ <strong>K</strong> ≤ 10 000).</p><p>The task is to determine on which roads you can drive to have the right to the compensation. That means the list of all roads that appear on at least one route from city 1 to city <strong>N</strong> where the length of the route does not exceed the length of the shortest route by more than <strong>K</strong>.</p><a id="more"></a><p>输入：</p><p>The input consists of <strong>M</strong>+1 lines. The first line contains the numbers <strong>N</strong>, <strong>M</strong>, and <strong>K</strong>. Each next line describes one road and contains the initial city number, the final city number and the length of the road. All numbers are integers and separated from each other by one or more spaces.</p><p>输出：</p><p>The output consists of several lines. The first line contains the integer <strong>L</strong> – the number of roads you can use. The following <strong>L</strong> lines contain the numbers of the roads in ascending order.</p><p>样例输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 5 1</span><br><span class="line">1 2 1</span><br><span class="line">1 3 4</span><br><span class="line">2 3 1</span><br><span class="line">2 4 3</span><br><span class="line">3 4 1</span><br></pre></td></tr></table></figure><p>样例输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>题目大意：</p><p>给出一个有 n 个点 m 条边的有向图，每条边有一定的长度，你从点 1 出发去 n 出差。公司规定，当你从点 1 到 n 走的路程长度不超过 1 到 n 的最短路长度加 K 时，你才可以获得报销。现在问题就是让你求哪些边是可以走的（就是说通过这条边，至少有一条从 1 到 n 的，长度不超过最短路长度加 K 的路径。</p><p>输入是一个图，然后按从小到大的编号输出可走的边。</p><p>废话不多说，解释都放在代码里：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Almost the shortest route</span></span><br><span class="line"><span class="comment"> * POJ-3554</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 由于此题网上无题解,此处解释一下思路:</span></span><br><span class="line"><span class="comment"> * 由于要考虑经过某一条边是否可行,</span></span><br><span class="line"><span class="comment"> * 例如边 e &lt;a, b, d&gt;, 若要判断经过 e 是否可行, 则考虑:</span></span><br><span class="line"><span class="comment"> * 1 -&gt; a -&gt; b -&gt; N 是否可行,</span></span><br><span class="line"><span class="comment"> * 此时需求出 1 -&gt; a, b -&gt; N 的最短路,</span></span><br><span class="line"><span class="comment"> * 所以需要跑两趟最短路, 以 1 为起点 和 以 N 为起点, 然后枚举边去判断</span></span><br><span class="line"><span class="comment"> * 因为是有向图,所以需要建两个图,一个正向图一个反向图.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> u, dist, id;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> edge&amp; t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> dist &gt; t.dist; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; vt1[maxn];  <span class="comment">//正向图</span></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; vt2[maxn];  <span class="comment">//反向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d1[maxn];</span><br><span class="line"><span class="keyword">int</span> d2[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;  <span class="comment">//读入优化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(_Tp&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> s = getchar();</span><br><span class="line">  <span class="keyword">while</span> (s &lt; <span class="string">&#x27;0&#x27;</span> || s &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">    s = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (s &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    x = x * <span class="number">10</span> + s - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    s = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> d[], <span class="built_in">vector</span>&lt;edge&gt; vt[])</span> </span>&#123;  <span class="comment">// 最短路，相信大家都懂</span></span><br><span class="line">  <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">  <span class="built_in">memset</span>(d, inf, <span class="keyword">sizeof</span>(d) * maxn);</span><br><span class="line">  d[s] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">priority_queue</span>&lt;edge&gt; q;</span><br><span class="line">  q.push(edge&#123;s, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">  <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">    edge e = q.top();</span><br><span class="line">    q.pop();</span><br><span class="line">    <span class="keyword">int</span> u = e.u;</span><br><span class="line">    <span class="keyword">if</span> (vis[u]) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vt[u].size(); i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = vt[u][i].u;</span><br><span class="line">      <span class="keyword">int</span> dist = d[u] + vt[u][i].dist;</span><br><span class="line">      <span class="keyword">if</span> (dist &lt; d[v]) &#123;</span><br><span class="line">        d[v] = dist;</span><br><span class="line">        q.push(edge&#123;v, d[v], <span class="number">0</span>&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> f, t, dist;</span><br><span class="line">    read(f);</span><br><span class="line">    read(t);</span><br><span class="line">    read(dist);</span><br><span class="line">    vt1[f].push_back(edge&#123;t, dist, i&#125;);  <span class="comment">// 建立正向图</span></span><br><span class="line">    vt2[t].push_back(edge&#123;f, dist, i&#125;);  <span class="comment">// 建立反向图</span></span><br><span class="line">  &#125;</span><br><span class="line">  dijkstra(<span class="number">1</span>, d1, vt1);</span><br><span class="line">  dijkstra(n, d2, vt2);</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">  <span class="keyword">int</span> len = d1[n];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;  <span class="comment">// 枚举边去判断</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vt1[i].size(); j++) &#123;</span><br><span class="line">      <span class="keyword">int</span> a = i, b = vt1[i][j].u;</span><br><span class="line">      <span class="keyword">int</span> dist = vt1[i][j].dist;</span><br><span class="line">      <span class="keyword">if</span> (d1[a] + d2[b] + dist &lt;= len + k) &#123;</span><br><span class="line">        ans.push_back(vt1[i][j].id);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(ans.begin(), ans.end());  <span class="comment">// 记得排序</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans.size());</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建个人博客</title>
      <link href="2019/08/11/first-blog/"/>
      <url>2019/08/11/first-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="本菜鸡第一次写博客，希望能够坚持下去XD"><a href="#本菜鸡第一次写博客，希望能够坚持下去XD" class="headerlink" title="本菜鸡第一次写博客，希望能够坚持下去XD"></a>本菜鸡第一次写博客，希望能够坚持下去XD</h2><p><del>感觉搭建个人博客还是有点麻烦的</del></p><p>步骤大概如下</p><ol><li>首先得有一个github账号，创建一个Repository，名字就是username.github.io，创建之后可以在setting里面选择主题，之后就可以通过 <a href="https://username.github.io">https://username.github.io</a> 来访问你的个人博客了！！</li></ol><ol><li><p>这一步比较麻烦，我们一般是在本地用markdown写完博客之后，通过一些工具转化成html和css，再上传到自己的github的username.github.io这个Repository里.</p><a id="more"></a><ul><li>首先要把Node.js，Git，Typora都下载安装好，搭建好相应的环境</li></ul></li></ol><ul><li>既然要远程上传至github的对应仓库下，就得用Git和github配置好ssh，这一步相对来说麻烦点，而且需要一点学习成本(你得学会Git常用的一些命令，这里推荐廖雪峰的教程，花上一个小时，把前面的几个命令学一下就差不多入门了)，这方面网上的资料很多。</li></ul><ul><li><p>下载完Node.js之后，在Git中使用命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nmp install hexo -g</span><br></pre></td></tr></table></figure><p>来下载hexo，这是一款用于将markdown转化为html和css的工具，(注意，在这一步      之前必须先把Node.js的环境配置好，并且修改了对应的环境变量)，安装完之后,重启    Git，创建你的hexo文件夹，之后</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> E:/hexo</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p> 完成对于该文件夹的初始化。</p></li><li><p>最最重要的还是如果从本地写好markdown之后，将其转为html和css然后上传至        github，此处有四个重要命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;pagetitle&quot;</span>   <span class="comment">##创建新的blog</span></span><br><span class="line">$ hexo g                 <span class="comment">##将markdown转化为html和css</span></span><br><span class="line">$ hexo s                 <span class="comment">##预览，通常在端口localhost:4000打开可查看</span></span><br><span class="line">$ hexo d                 <span class="comment">##将修改上传至github</span></span><br></pre></td></tr></table></figure><p> 详情参见hexo的官方中文文档和资料。</p></li></ul><ol><li>选择一款好用的markdown编辑器！！！强烈推荐Typora，非常好用，边写边预览，且快捷键十分强大，功能也很全面，关键是免费QAQ</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 开发环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
